"""
UX Improvements Module
Provides enhanced user experience features and improvements.
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class UXManager:
    """Centralized UX management and improvements"""
    
    def __init__(self, db_manager):
        self.db_manager = db_manager
        self.user_preferences = {}
        self.help_topics = {
            "onboarding": {
                "title": "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
                "content": """
**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HackReality!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

**–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:**
‚Ä¢ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
‚Ä¢ –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

**–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?** –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞! üéØ
                """
            },
            "plans": {
                "title": "üìã –ü–ª–∞–Ω—ã —Ä–∞–±–æ—Ç—ã",
                "content": """
**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:**

üöÄ **Express (–≠–∫—Å–ø—Ä–µ—Å—Å)**
‚Ä¢ 6 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 1 –Ω–µ–¥–µ–ª—é
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞

‚ö° **2-–Ω–µ–¥–µ–ª—å–Ω—ã–π**
‚Ä¢ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–µ–Ω—å
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üìù **Regular (–û–±—ã—á–Ω—ã–π)**
‚Ä¢ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞

**–ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—ã–±—Ä–∞—Ç—å?**
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —Ä–∏—Ç–º—É –∂–∏–∑–Ω–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏.
                """
            },
            "payment": {
                "title": "üí≥ –û–ø–ª–∞—Ç–∞",
                "content": """
**–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**

üè¶ **T-Bank**
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä: +79853659487
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –±–æ—Ç–µ

**–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É
‚Ä¢ –ù–∞—á–Ω–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞

**–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
            },
            "support": {
                "title": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                "content": """
**–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @dapavl
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞

**–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω? - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π? - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã? - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start

**–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!** ü§ù
                """
            }
        }
    
    async def show_help_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show interactive help menu"""
        try:
            keyboard = []
            for topic_id, topic in self.help_topics.items():
                keyboard.append([InlineKeyboardButton(topic["title"], callback_data=f"help_{topic_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            help_text = """
üÜò **–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ HackReality**

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:

‚Ä¢ üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
‚Ä¢ üìã –ü–ª–∞–Ω—ã —Ä–∞–±–æ—Ç—ã  
‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∞
‚Ä¢ üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

**–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
            """
            
            await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error showing help menu: {e}")
    
    async def show_help_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE, topic_id: str):
        """Show specific help topic"""
        try:
            if topic_id not in self.help_topics:
                await update.callback_query.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            topic = self.help_topics[topic_id]
            
            keyboard = [
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ–º", callback_data="help_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                f"{topic['title']}\n\n{topic['content']}",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error showing help topic: {e}")
    
    async def show_progress_indicator(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    current_step: int, total_steps: int, step_name: str):
        """Show progress indicator for multi-step processes"""
        try:
            progress_percent = (current_step / total_steps) * 100
            progress_bar = self._create_progress_bar(progress_percent)
            
            progress_text = f"""
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å: {step_name}**

{progress_bar} {progress_percent:.0f}%

**–®–∞–≥ {current_step} –∏–∑ {total_steps}**

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º! üéØ
            """
            
            await update.message.reply_text(progress_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing progress indicator: {e}")
    
    def _create_progress_bar(self, percent: float, length: int = 10) -> str:
        """Create a visual progress bar"""
        try:
            filled = int((percent / 100) * length)
            empty = length - filled
            return "‚ñà" * filled + "‚ñë" * empty
        except Exception as e:
            logger.error(f"Error creating progress bar: {e}")
            return "‚ñë" * 10
    
    async def show_encouragement_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       message_type: str = "general"):
        """Show encouraging messages to motivate users"""
        try:
            encouragement_messages = {
                "general": [
                    "üåü –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
                    "üí™ –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –º–µ—á—Ç–µ! –¢—ã –º–æ–ª–æ–¥–µ—Ü!",
                    "üéØ –¢–≤–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    "‚ú® –¢—ã –¥–µ–ª–∞–µ—à—å –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É! –í–µ—Ä—å –≤ —Å–µ–±—è!",
                    "üöÄ –¢–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!"
                ],
                "milestone": [
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º! –¢—ã –ø—Ä–æ—à–µ–ª –≤–∞–∂–Ω—ã–π —ç—Ç–∞–ø!",
                    "üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –ø–æ–∫–∞–∑–∞–ª –Ω–∞—Å—Ç–æ—è—â—É—é —Å–∏–ª—É –≤–æ–ª–∏!",
                    "‚≠ê –¢—ã –ø—Ä–µ–≤–∑–æ—à–µ–ª –æ–∂–∏–¥–∞–Ω–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    "üéä –í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!",
                    "üëè –ë—Ä–∞–≤–æ! –¢–≤–æ—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–ª–æ–¥—ã!"
                ],
                "challenge": [
                    "üíé –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞—é—Ç –Ω–∞—Å —Å–∏–ª—å–Ω–µ–µ! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
                    "üî• –ò—Å–ø—ã—Ç–∞–Ω–∏—è - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–∏! –í–ø–µ—Ä–µ–¥!",
                    "‚ö° –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! –ù–µ —Å–¥–∞–≤–∞–π—Å—è!",
                    "üåü –ö–∞–∂–¥–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ - —ç—Ç–æ —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ —É—Å–ø–µ—Ö—É!",
                    "üí™ –¢–≤–æ—è —Å–∏–ª–∞ –≤–æ–ª–∏ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏!"
                ]
            }
            
            import random
            messages = encouragement_messages.get(message_type, encouragement_messages["general"])
            message = random.choice(messages)
            
            await update.message.reply_text(f"üíù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n{message}", parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing encouragement message: {e}")
    
    async def show_tip_of_the_day(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show daily tip for users"""
        try:
            tips = [
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–¥–Ω–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π —Ü–µ–ª–∏. –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ü–µ–ª–∏ –¥–∞—Å—Ç –≤–∞–º —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π!",
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —É—Å–ø–µ—Ö–æ–≤. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π!",
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –û–∫—Ä—É–∂–∏—Ç–µ —Å–µ–±—è –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—è—Ç –≤ –≤–∞—à–∏ –º–µ—á—Ç—ã. –ò—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥!",
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏. –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É!",
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫. –û–Ω–∏ - —ç—Ç–æ —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –≤–∞—Å –º—É–¥—Ä–µ–µ –∏ —Å–∏–ª—å–Ω–µ–µ!",
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π —É—Å–ø–µ—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫ –≤—ã –¥–æ—Å—Ç–∏–≥–∞–µ—Ç–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
                "üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –∑–∞ —Ç–æ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–æ–ª—å—à–µ —Ö–æ—Ä–æ—à–µ–≥–æ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å!"
            ]
            
            import random
            tip = random.choice(tips)
            
            await update.message.reply_text(tip, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing tip of the day: {e}")
    
    async def show_motivational_quote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show motivational quote"""
        try:
            quotes = [
                "üåü '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - —ç—Ç–æ –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å.' - –°—Ç–∏–≤ –î–∂–æ–±—Å",
                "üí™ '–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –æ—Ç –æ–¥–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –∫ –¥—Ä—É–≥–æ–π, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.' - –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
                "üéØ '–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.' - –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç",
                "üöÄ '–ù–µ –±–æ–π—Ç–µ—Å—å –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–≥–æ.' - –î–∂–æ–Ω –†–æ–∫—Ñ–µ–ª–ª–µ—Ä",
                "‚ú® '–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ, –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é.' - –°—Ç–∏–≤ –î–∂–æ–±—Å",
                "üíé '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –°–ª–µ–¥—É—é—â–µ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.' - –ö–∏—Ç–∞–π—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞",
                "üî• '–ù–µ –∂–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ.' - –î–∂–æ—Ä–¥–∂ –ë–µ—Ä–Ω–∞—Ä–¥ –®–æ—É"
            ]
            
            import random
            quote = random.choice(quotes)
            
            await update.message.reply_text(f"üí≠ **–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞**\n\n{quote}", parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing motivational quote: {e}")
    
    async def show_quick_actions_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show quick actions menu for easy navigation"""
        try:
            keyboard = [
                [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_progress")],
                [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="tip_of_day")],
                [InlineKeyboardButton("üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivational_quote")],
                [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help_menu")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            menu_text = """
üéõÔ∏è **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

‚Ä¢ üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è
‚Ä¢ üí≠ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É
‚Ä¢ üÜò –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

**–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º!** üòä
            """
            
            await update.message.reply_text(menu_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error showing quick actions menu: {e}")
    
    async def personalize_message(self, user_id: int, base_message: str) -> str:
        """Personalize message based on user data"""
        try:
            # Get user profile
            profile = await self.db_manager.get_user_profile(user_id)
            if not profile:
                return base_message
            
            # Get user's name
            first_name = profile.get('first_name', '')
            if first_name:
                personalized_message = base_message.replace('—Ç—ã', f'{first_name}')
                personalized_message = personalized_message.replace('–¢—ã', f'{first_name}')
                return personalized_message
            
            return base_message
            
        except Exception as e:
            logger.error(f"Error personalizing message: {e}")
            return base_message
    
    async def show_achievement_badge(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   achievement: str, description: str):
        """Show achievement badge for user accomplishments"""
        try:
            badge_text = f"""
üèÜ **–î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û!**

**{achievement}**

{description}

**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –≤–∞—à–µ–π –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏! üåü
            """
            
            await update.message.reply_text(badge_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing achievement badge: {e}")
    
    async def show_reminder_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show reminder setup for users"""
        try:
            keyboard = [
                [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="setup_reminders")],
                [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="disable_reminders")],
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_reminder_time")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            reminder_text = """
‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**

–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º?

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:**
‚Ä¢ ‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
‚Ä¢ üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –≤–∞–º:**
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞—Ç—å –æ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Ü–µ–ª—å—é
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
‚Ä¢ –î–æ—Å—Ç–∏–≥–∞—Ç—å –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç! üéØ
            """
            
            await update.message.reply_text(reminder_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error showing reminder setup: {e}")
    
    async def show_feedback_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show feedback request to users"""
        try:
            keyboard = [
                [InlineKeyboardButton("‚≠ê –û—Ç–ª–∏—á–Ω–æ", callback_data="feedback_excellent")],
                [InlineKeyboardButton("üëç –•–æ—Ä–æ—à–æ", callback_data="feedback_good")],
                [InlineKeyboardButton("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="feedback_ok")],
                [InlineKeyboardButton("üëé –ü–ª–æ—Ö–æ", callback_data="feedback_bad")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback_text")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            feedback_text = """
üìù **–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞**

–ö–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Å HackReality?

–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â–µ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!

**–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:**
            """
            
            await update.message.reply_text(feedback_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error showing feedback request: {e}")
