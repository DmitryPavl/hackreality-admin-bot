"""
Setting Up Module
Handles the setup process to collect key texts and preferences from the client.
"""

import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Dict, Any, List
from modules.admin_notifications import admin_notifications

logger = logging.getLogger(__name__)

class SettingUpModule:
    def __init__(self, db_manager, state_manager, bot_instance=None):
        self.db_manager = db_manager
        self.state_manager = state_manager
        self.bot_instance = bot_instance
        
        # Setup steps for emotional state collection
        self.setup_steps = [
            "welcome",
            "collect_positive_feelings",
            "collect_nervous_feelings", 
            "collect_available_options",
            "transform_negative_feelings",
            "create_focus_statements",
            "complete_setup"
        ]
        
        # Key text categories
        self.key_text_categories = {
            "writing_style": {
                "name": "Writing Style Examples",
                "description": "Share examples of your preferred writing style",
                "examples": ["Blog posts", "Social media posts", "Emails", "Articles"]
            },
            "tone_voice": {
                "name": "Tone & Voice",
                "description": "Describe your preferred tone and voice",
                "examples": ["Professional", "Casual", "Friendly", "Authoritative", "Humorous"]
            },
            "content_types": {
                "name": "Content Types",
                "description": "What types of content do you need?",
                "examples": ["Educational", "Promotional", "Entertainment", "News", "How-to guides"]
            },
            "target_audience": {
                "name": "Target Audience",
                "description": "Who is your target audience?",
                "examples": ["Young professionals", "Students", "Business owners", "General public"]
            }
        }
    
    async def start_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the setup process after payment confirmation"""
        user_id = update.effective_user.id
        
        # Get user's goal and order information
        state_data = await self.db_manager.get_user_state_data(user_id)
        user_goal = state_data.get("user_goal", "")
        final_target_goal = state_data.get("final_target_goal", user_goal)
        order_id = state_data.get("order_id", "")
        selected_plan = state_data.get("selected_plan", "")
        
        # Initialize setup data with emotional state collection
        await self.db_manager.update_user_state_data(user_id, {
            "setup_step": 0,
            "positive_feelings": [],
            "nervous_feelings": [],
            "available_options": [],
            "transformed_negatives": [],
            "focus_statements": [],
            "setup_completed": False,
            "user_goal": user_goal,
            "final_target_goal": final_target_goal,
            "order_id": order_id,
            "selected_plan": selected_plan,
            "current_question_type": "positive_feelings",
            "statements_collected": 0
        })
        
        await self._welcome_to_setup(update, context, final_target_goal, order_id)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle messages during emotional state setup"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # Get current setup state
        state_data = await self.db_manager.get_user_state_data(user_id)
        current_question_type = state_data.get("current_question_type", "positive_feelings")
        
        # Check for flow control commands
        if message_text.lower() in ["–≥–æ—Ç–æ–≤", "–¥–∞–ª—å—à–µ", "–≥–æ—Ç–æ–≤–æ", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–¥–∞–ª–µ–µ"]:
            await self._handle_flow_control(update, context, current_question_type)
            return
        
        if current_question_type == "positive_feelings":
            await self._process_positive_feeling_input(update, context, message_text)
        elif current_question_type == "nervous_feelings":
            await self._process_nervous_feeling_input(update, context, message_text)
        elif current_question_type == "available_options":
            await self._process_available_option_input(update, context, message_text)
        elif current_question_type == "transform_negative":
            await self._process_negative_transformation_input(update, context, message_text)
        elif current_question_type == "task_generation":
            await self._process_task_input(update, context, message_text)
        elif current_question_type == "task_selection":
            await self._process_task_selection_input(update, context, message_text)
        elif current_question_type == "task_response_collection":
            await self._process_task_response(update, context, message_text)
        elif current_question_type == "task_feelings_collection":
            await self._process_task_feelings(update, context, message_text)
        else:
            await self._show_setup_help(update, context)
    
    async def _handle_flow_control(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_question_type: str):
        """Handle flow control commands (–≥–æ—Ç–æ–≤, –¥–∞–ª—å—à–µ, etc.)"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        if current_question_type == "positive_feelings":
            positive_count = len(state_data.get("positive_feelings", []))
            if positive_count >= 3:  # Minimum 3 positive feelings
                await self._move_to_nervous_feelings(update, context)
            else:
                await self._ask_for_minimum_positive(update, context, positive_count)
        
        elif current_question_type == "nervous_feelings":
            nervous_count = len(state_data.get("nervous_feelings", []))
            if nervous_count >= 2:  # Minimum 2 nervous feelings
                await self._move_to_available_options(update, context)
            else:
                await self._ask_for_minimum_nervous(update, context, nervous_count)
        
        elif current_question_type == "available_options":
            options_count = len(state_data.get("available_options", []))
            if options_count >= 2:  # Minimum 2 options
                await self._move_to_negative_transformation(update, context)
            else:
                await self._ask_for_minimum_options(update, context, options_count)
        
        elif current_question_type == "transform_negative":
            await self._create_focus_statements(update, context)
        
        elif current_question_type == "task_generation":
            await self._move_to_next_focus_statement(update, context)
    
    async def _ask_for_minimum_positive(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask for minimum positive feelings"""
        remaining = 3 - current_count
        text = f"""
‚ö†Ô∏è **–ù—É–∂–Ω–æ –µ—â–µ {remaining} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤**

–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {current_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤, –∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.

**–ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ {remaining} —á—É–≤—Å—Ç–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–µ—à—å, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏.**

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø –±—É–¥—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å..."
‚Ä¢ "–Ø –ø–æ—á—É–≤—Å—Ç–≤—É—é..."
‚Ä¢ "–ú–Ω–µ –±—É–¥–µ—Ç..."

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—é –º–æ—Ç–∏–≤–∞—Ü–∏—é! üòä
        """
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _ask_for_minimum_nervous(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask for minimum nervous feelings"""
        remaining = 2 - current_count
        text = f"""
‚ö†Ô∏è **–ù—É–∂–Ω–æ –µ—â–µ {remaining} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤**

–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {current_count} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤, –∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–≤–æ–∏–º–∏ —Å—Ç—Ä–∞—Ö–∞–º–∏.

**–ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ {remaining} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞–º–∏ –∏–ª–∏ —Å—Ç—Ä–∞—Ö–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ç–≤–æ–µ–π —Ü–µ–ª—å—é.**

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø –±–æ—é—Å—å..."
‚Ä¢ "–ú–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç..."
‚Ä¢ "–Ø –Ω–µ—Ä–≤–Ω–∏—á–∞—é –∏–∑-–∑–∞..."

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏ –≤ –º–æ—Ç–∏–≤–∞—Ü–∏—é! üò∞
        """
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _ask_for_minimum_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask for minimum available options"""
        remaining = 2 - current_count
        text = f"""
‚ö†Ô∏è **–ù—É–∂–Ω–æ –µ—â–µ {remaining} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π**

–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {current_count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π.

**–ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ {remaining} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.**

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø —Å–º–æ–≥—É..."
‚Ä¢ "–£ –º–µ–Ω—è –±—É–¥–µ—Ç..."
‚Ä¢ "–Ø –±—É–¥—É..."

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–µ–±—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç! üöÄ
        """
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _welcome_to_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target_goal: str, order_id: str):
        """Welcome user to setup process"""
        # Truncate goal for display
        display_goal = target_goal[:80] + "..." if len(target_goal) > 80 else target_goal
        
        welcome_text = f"""
üéâ **–û—Ç–ª–∏—á–Ω–æ! –î–æ–Ω–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** "{display_goal}"

–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–π —Ü–µ–ª–∏! –î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Ü–µ–ª—å—é.

**–ß—Ç–æ —è –±—É–¥—É –∏–∑—É—á–∞—Ç—å:**
‚ú® **–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ —Ç—ã –∏—Å–ø—ã—Ç–∞–µ—à—å, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏**
‚ú® **–û —á–µ–º —Ç—ã –±–µ—Å–ø–æ–∫–æ–∏—à—å—Å—è –∏–ª–∏ –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—à—å**
‚ú® **–ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –¥–ª—è —Ç–µ–±—è**
‚ú® **–ö–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ö–∏ –≤ –º–æ—Ç–∏–≤–∞—Ü–∏—é**

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Å —Ç–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏! üöÄ

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∏–∑—É—á–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤!
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–Ω–µ–º! üöÄ", callback_data="start_key_texts")],
            [InlineKeyboardButton("–ß—Ç–æ –æ—Ç –º–µ–Ω—è –Ω—É–∂–Ω–æ? ‚ùì", callback_data="setup_explanation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _start_positive_feelings_collection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start collecting positive feelings when goal is achieved"""
        user_id = update.effective_user.id
        
        # Get user's goal for context
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        
        # Update setup step and question type
        await self.db_manager.update_user_state_data(user_id, {
            "setup_step": 1,
            "current_question_type": "positive_feelings",
            "statements_collected": 0
        })
        
        positive_feelings_text = f"""
üòä **–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ —Ç—ã –∏—Å–ø—ã—Ç–∞–µ—à—å, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏?**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"

–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ —ç—Ç–æ–π —Ü–µ–ª–∏. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞ —Ç—ã –∏—Å–ø—ã—Ç–∞–µ—à—å?

**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ "–Ø –±—É–¥—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–¥–æ—Å—Ç—å –∑–∞ —Å–µ–±—è"
‚Ä¢ "–Ø –ø–æ—á—É–≤—Å—Ç–≤—É—é –æ–±–ª–µ–≥—á–µ–Ω–∏–µ –∏ —Ä–∞–¥–æ—Å—Ç—å"
‚Ä¢ "–Ø –±—É–¥—É —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö"
‚Ä¢ "–Ø –ø–æ—á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ"
‚Ä¢ "–Ø –±—É–¥—É —Å—á–∞—Å—Ç–ª–∏–≤ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω"

**–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π –¥–æ 7 —Ç–∞–∫–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å!**

–ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —á—É–≤—Å—Ç–≤–∞... üí≠
        """
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–Ω—è–ª! –ù–∞—á–∏–Ω–∞—é! üòä", callback_data="ready_for_positive")],
            [InlineKeyboardButton("–ù—É–∂–Ω—ã –ø—Ä–∏–º–µ—Ä—ã? üí°", callback_data="positive_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(positive_feelings_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _process_positive_feeling_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process positive feeling input from user"""
        user_id = update.effective_user.id
        
        # Get current positive feelings
        state_data = await self.db_manager.get_user_state_data(user_id)
        positive_feelings = state_data.get("positive_feelings", [])
        
        # Check for duplicates
        is_duplicate = await self._check_duplicate_statement(message_text, positive_feelings)
        
        if is_duplicate:
            await self._handle_duplicate_statement(update, context, message_text, "positive_feelings")
            return
        
        # Add new feeling
        positive_feelings.append({
            "statement": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown")
        })
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {
            "positive_feelings": positive_feelings,
            "statements_collected": len(positive_feelings)
        })
        
        # Get plan type to determine limits
        state_data = await self.db_manager.get_user_state_data(user_id)
        selected_plan = state_data.get("selected_plan", "")
        
        # Set limits based on plan type
        if selected_plan == "regular":
            max_positive = 7  # Extended for Regular plan
        else:
            max_positive = 5  # Optimized for Express and 2-week plans
        
        # Check if we have enough positive feelings
        if len(positive_feelings) >= max_positive:
            await self._ask_if_finished_positive(update, context, len(positive_feelings))
        else:
            await self._ask_for_more_positive_feelings(update, context, len(positive_feelings), max_positive)
    
    async def _ask_for_more_positive_feelings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int, max_positive: int):
        """Ask for more positive feelings"""
        remaining = max_positive - current_count
        
        if remaining > 1:
            text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ.**

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {current_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤. –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ {remaining} —á—É–≤—Å—Ç–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–µ—à—å, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø –±—É–¥—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å..."
‚Ä¢ "–Ø –ø–æ—á—É–≤—Å—Ç–≤—É—é..."
‚Ä¢ "–ú–Ω–µ –±—É–¥–µ—Ç..."

–ß—Ç–æ –µ—â–µ —Ç—ã –±—É–¥–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å? üòä
            """
        else:
            text = f"""
‚úÖ **–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –ù—É–∂–Ω–æ –µ—â–µ –æ–¥–Ω–æ —á—É–≤—Å—Ç–≤–æ.**

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {current_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤. –ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ –æ–¥–Ω–∏–º —á—É–≤—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–µ—à—å, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏.

–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–∂–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ
‚Ä¢ –°–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ
‚Ä¢ –¢–æ, —á—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç

–ö–∞–∫–æ–µ —Ç–≤–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á—É–≤—Å—Ç–≤–æ? üéØ
            """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _check_duplicate_statement(self, new_statement: str, existing_statements: list) -> bool:
        """Check if statement is duplicate or very similar"""
        new_lower = new_statement.lower().strip()
        
        for existing in existing_statements:
            existing_lower = existing["statement"].lower().strip()
            
            # Check for exact match
            if new_lower == existing_lower:
                return True
            
            # Check for very similar statements (80% similarity)
            if self._calculate_similarity(new_lower, existing_lower) > 0.8:
                return True
        
        return False
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """Calculate similarity between two texts"""
        # Simple word-based similarity
        words1 = set(text1.split())
        words2 = set(text2.split())
        
        if not words1 and not words2:
            return 1.0
        if not words1 or not words2:
            return 0.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union)
    
    async def _handle_duplicate_statement(self, update: Update, context: ContextTypes.DEFAULT_TYPE, statement: str, question_type: str):
        """Handle duplicate statement detection"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        # Get current count based on question type
        if question_type == "positive_feelings":
            current_count = len(state_data.get("positive_feelings", []))
            max_count = 7
            question_name = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤"
        elif question_type == "nervous_feelings":
            current_count = len(state_data.get("nervous_feelings", []))
            max_count = 5
            question_name = "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤"
        elif question_type == "available_options":
            current_count = len(state_data.get("available_options", []))
            max_count = 3
            question_name = "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        else:
            current_count = 0
            max_count = 5
            question_name = "—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
        
        text = f"""
‚ö†Ô∏è **–ü–æ—Ö–æ–∂–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å!**

–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —ç—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ, —á—Ç–æ —Ç—ã —É–∂–µ —Å–∫–∞–∑–∞–ª:

**–¢–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{statement}"

**–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:**
‚Ä¢ –ü–æ–¥—É–º–∞—Ç—å –æ –¥—Ä—É–≥–æ–º, –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á—É–≤—Å—Ç–≤–µ
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {current_count} {question_name}. 

**–•–æ—á–µ—à—å:**
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É

–ù–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤" –∏–ª–∏ "–¥–∞–ª—å—à–µ", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –¥—Ä—É–≥–∏–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _ask_if_finished_positive(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask if user is finished with positive feelings"""
        text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {current_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤.**

–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –∏–ª–∏ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.

**–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?**
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É

–ù–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤" –∏–ª–∏ "–¥–∞–ª—å—à–µ", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –µ—â–µ –æ–¥–Ω–∏–º —á—É–≤—Å—Ç–≤–æ–º.
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _move_to_nervous_feelings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Move to nervous feelings collection"""
        user_id = update.effective_user.id
        
        # Get user's goal for context
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        positive_count = len(state_data.get("positive_feelings", []))
        
        # Update question type
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "nervous_feelings",
            "statements_collected": 0
        })
        
        nervous_feelings_text = f"""
üò∞ **–û —á–µ–º —Ç—ã –±–µ—Å–ø–æ–∫–æ–∏—à—å—Å—è –∏–ª–∏ –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—à—å?**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"

–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {positive_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –≤ —Å–≤—è–∑–∏ —Å —ç—Ç–æ–π —Ü–µ–ª—å—é.

**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ "–Ø –±–æ—é—Å—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å"
‚Ä¢ "–ú–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, —á—Ç–æ —ç—Ç–æ –∑–∞–π–º–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
‚Ä¢ "–Ø –Ω–µ—Ä–≤–Ω–∏—á–∞—é –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ"
‚Ä¢ "–Ø –ø–µ—Ä–µ–∂–∏–≤–∞—é, —á—Ç–æ —É –º–µ–Ω—è –Ω–µ —Ö–≤–∞—Ç–∏—Ç —Å–∏–ª"
‚Ä¢ "–ú–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–∏—Ç, —á—Ç–æ —è –º–æ–≥—É –ø–æ—Ç–µ—Ä–ø–µ—Ç—å –Ω–µ—É–¥–∞—á—É"

**–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç!**

–ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞... üò∞
        """
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–Ω—è–ª! –ù–∞—á–∏–Ω–∞—é! üò∞", callback_data="ready_for_nervous")],
            [InlineKeyboardButton("–ù—É–∂–Ω—ã –ø—Ä–∏–º–µ—Ä—ã? üí°", callback_data="nervous_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(nervous_feelings_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _process_nervous_feeling_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process nervous feeling input from user"""
        user_id = update.effective_user.id
        
        # Get current nervous feelings
        state_data = await self.db_manager.get_user_state_data(user_id)
        nervous_feelings = state_data.get("nervous_feelings", [])
        
        # Check for duplicates
        is_duplicate = await self._check_duplicate_statement(message_text, nervous_feelings)
        
        if is_duplicate:
            await self._handle_duplicate_statement(update, context, message_text, "nervous_feelings")
            return
        
        # Add new nervous feeling
        nervous_feelings.append({
            "statement": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown")
        })
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {
            "nervous_feelings": nervous_feelings,
            "statements_collected": len(nervous_feelings)
        })
        
        # Check if we have enough nervous feelings (3-5 is good)
        if len(nervous_feelings) >= 3:
            await self._ask_if_finished_nervous(update, context, len(nervous_feelings))
        else:
            await self._ask_for_more_nervous_feelings(update, context, len(nervous_feelings))
    
    async def _ask_for_more_nervous_feelings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask for more nervous feelings"""
        text = f"""
‚úÖ **–ü–æ–Ω—è–ª, —è –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ.**

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {current_count} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤. –ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ —Ç–µ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø –±–æ—é—Å—å..."
‚Ä¢ "–ú–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç..."
‚Ä¢ "–Ø –Ω–µ—Ä–≤–Ω–∏—á–∞—é –∏–∑-–∑–∞..."

–ß—Ç–æ –µ—â–µ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç? üò∞
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _ask_if_finished_nervous(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask if user is finished with nervous feelings"""
        text = f"""
‚úÖ **–•–æ—Ä–æ—à–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {current_count} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤.**

–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –∏–ª–∏ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.

**–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?**
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞–º–∏
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É

–ù–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤" –∏–ª–∏ "–¥–∞–ª—å—à–µ", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –µ—â–µ –æ–¥–Ω–∏–º –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º.
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _move_to_available_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Move to available options collection"""
        user_id = update.effective_user.id
        
        # Get user's goal for context
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        nervous_count = len(state_data.get("nervous_feelings", []))
        
        # Update question type
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "available_options",
            "statements_collected": 0
        })
        
        available_options_text = f"""
üöÄ **–ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –¥–ª—è —Ç–µ–±—è?**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"

–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {nervous_count} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –æ —Ç–æ–º, –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–∫—Ä–æ—é—Ç—Å—è –¥–ª—è —Ç–µ–±—è, –∫–æ–≥–¥–∞ —Ç—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —ç—Ç–æ–π —Ü–µ–ª–∏.

**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ "–Ø —Å–º–æ–≥—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –º–∏—Ä—É"
‚Ä¢ "–£ –º–µ–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ–º—å–∏"
‚Ä¢ "–Ø —Å–º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º"
‚Ä¢ "–Ø –±—É–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º"
‚Ä¢ "–Ø —Å–º–æ–≥—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"

**–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π 2-3 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É —Ç–µ–±—è –ø–æ—è–≤—è—Ç—Å—è!**

–ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏... üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–Ω—è–ª! –ù–∞—á–∏–Ω–∞—é! üöÄ", callback_data="ready_for_options")],
            [InlineKeyboardButton("–ù—É–∂–Ω—ã –ø—Ä–∏–º–µ—Ä—ã? üí°", callback_data="options_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(available_options_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _process_available_option_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process available option input from user"""
        user_id = update.effective_user.id
        
        # Get current available options
        state_data = await self.db_manager.get_user_state_data(user_id)
        available_options = state_data.get("available_options", [])
        
        # Check for duplicates
        is_duplicate = await self._check_duplicate_statement(message_text, available_options)
        
        if is_duplicate:
            await self._handle_duplicate_statement(update, context, message_text, "available_options")
            return
        
        # Add new option
        available_options.append({
            "statement": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown")
        })
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {
            "available_options": available_options,
            "statements_collected": len(available_options)
        })
        
        # Check if we have enough options (2-3 is good)
        if len(available_options) >= 2:
            await self._ask_if_finished_options(update, context, len(available_options))
        else:
            await self._ask_for_more_options(update, context, len(available_options))
    
    async def _ask_for_more_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask for more available options"""
        text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.**

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {current_count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ —Ç–µ–º, –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É —Ç–µ–±—è –ø–æ—è–≤—è—Ç—Å—è.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø —Å–º–æ–≥—É..."
‚Ä¢ "–£ –º–µ–Ω—è –±—É–¥–µ—Ç..."
‚Ä¢ "–Ø –±—É–¥—É..."

–ö–∞–∫–∏–µ –µ—â–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É —Ç–µ–±—è –ø–æ—è–≤—è—Ç—Å—è? üöÄ
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _ask_if_finished_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask if user is finished with available options"""
        text = f"""
‚úÖ **–•–æ—Ä–æ—à–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {current_count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.**

–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –æ–¥–Ω–æ–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –∏–ª–∏ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.

**–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?**
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –æ–¥–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

–ù–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤" –∏–ª–∏ "–¥–∞–ª—å—à–µ", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –µ—â–µ –æ–¥–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é.
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _move_to_negative_transformation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Move to negative transformation phase"""
        user_id = update.effective_user.id
        
        # Get user's data
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        positive_count = len(state_data.get("positive_feelings", []))
        nervous_count = len(state_data.get("nervous_feelings", []))
        options_count = len(state_data.get("available_options", []))
        
        # Update question type
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "transform_negative",
            "statements_collected": 0
        })
        
        transformation_text = f"""
üîÑ **–ü—Ä–µ–≤—Ä–∞—Ç–∏–º —Å—Ç—Ä–∞—Ö–∏ –≤ –º–æ—Ç–∏–≤–∞—Ü–∏—é!**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"

–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å:
‚Ä¢ {positive_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤
‚Ä¢ {nervous_count} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤  
‚Ä¢ {options_count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–µ–≤—Ä–∞—Ç–∏–º —Ç–≤–æ–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –º—ã –Ω–∞–π–¥–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.

**–ü—Ä–∏–º–µ—Ä:**
–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ: "–Ø –±–æ—é—Å—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å"
–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "–Ø –±—É–¥—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö"

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞... üîÑ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é! üîÑ", callback_data="start_transformation")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ üìã", callback_data="show_nervous")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(transformation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _process_negative_transformation_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process negative transformation input from user"""
        user_id = update.effective_user.id
        
        # Get current data
        state_data = await self.db_manager.get_user_state_data(user_id)
        nervous_feelings = state_data.get("nervous_feelings", [])
        transformed_negatives = state_data.get("transformed_negatives", [])
        current_index = state_data.get("current_transformation_index", 0)
        
        # If we have a nervous feeling to transform
        if current_index < len(nervous_feelings):
            current_nervous = nervous_feelings[current_index]
            
            # Add transformation
            transformed_negatives.append({
                "original_nervous": current_nervous["statement"],
                "positive_transformation": message_text,
                "timestamp": context.bot_data.get("current_time", "unknown")
            })
            
            # Update state
            await self.db_manager.update_user_state_data(user_id, {
                "transformed_negatives": transformed_negatives,
                "current_transformation_index": current_index + 1
            })
            
            # Check if we have more to transform
            if current_index + 1 < len(nervous_feelings):
                await self._ask_for_next_transformation(update, context, current_index + 1, nervous_feelings)
            else:
                await self._create_focus_statements(update, context)
        else:
            await self._create_focus_statements(update, context)
    
    async def _ask_for_next_transformation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, index: int, nervous_feelings: list):
        """Ask for next transformation"""
        current_nervous = nervous_feelings[index]
        
        text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é.**

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º:

**–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ:** "{current_nervous['statement']}"

–ö–∞–∫–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞?

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø –±—É–¥—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å..."
‚Ä¢ "–Ø –ø–æ—á—É–≤—Å—Ç–≤—É—é..."
‚Ä¢ "–ú–Ω–µ –±—É–¥–µ—Ç..."

–ö–∞–∫—É—é –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã –≤–∏–¥–∏—à—å? üîÑ
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _create_focus_statements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create final focus statements"""
        user_id = update.effective_user.id
        
        # Get all data
        state_data = await self.db_manager.get_user_state_data(user_id)
        positive_feelings = state_data.get("positive_feelings", [])
        available_options = state_data.get("available_options", [])
        transformed_negatives = state_data.get("transformed_negatives", [])
        
        # Create focus statements
        focus_statements = []
        
        # Add all positive feelings directly
        for feeling in positive_feelings:
            focus_statements.append(feeling["statement"])
        
        # Add all available options directly
        for option in available_options:
            focus_statements.append(option["statement"])
        
        # Add transformed negatives (positive transformations)
        for transformation in transformed_negatives:
            focus_statements.append(transformation["positive_transformation"])
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {
            "focus_statements": focus_statements,
            "current_question_type": "complete_setup"
        })
        
        # Show final focus statements
        await self._show_final_focus_statements(update, context, focus_statements)
    
    async def _show_final_focus_statements(self, update: Update, context: ContextTypes.DEFAULT_TYPE, focus_statements: list):
        """Show final focus statements"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        
        statements_text = f"""
üéØ **–¢–≤–æ–∏ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"

–Ø —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è {len(focus_statements)} —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏:

**üìã –¢–≤–æ–∏ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:**
        """
        
        # Add statements (limit to avoid message length issues)
        for i, statement in enumerate(focus_statements[:10], 1):  # Show first 10
            statements_text += f"\n**{i}.** {statement}"
        
        if len(focus_statements) > 10:
            statements_text += f"\n\n... –∏ –µ—â–µ {len(focus_statements) - 10} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
        
        statements_text += """

**üéâ –û—Ç–ª–∏—á–Ω–æ!** –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å —Ç–≤–æ–∏ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≥–ª—É–±–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.

**–ß—Ç–æ –¥–∞–ª—å—à–µ:**
–Ø —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é.

–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞? üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª! üöÄ", callback_data="create_material")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üìã", callback_data="view_all_statements")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(statements_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _start_material_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start material creation phase"""
        user_id = update.effective_user.id
        
        # Get user's data
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        selected_plan = state_data.get("selected_plan", "")
        focus_statements = state_data.get("focus_statements", [])
        
        # Get plan details
        plan_details = {
            "extreme": {
                "name": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
                "duration": "10-15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞",
                "period": "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
                "approach": "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
            },
            "2week": {
                "name": "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω", 
                "duration": "15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
                "period": "–≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å",
                "approach": "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
            }
        }
        
        plan_info = plan_details.get(selected_plan, {
            "name": "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω",
            "duration": "—Ä–µ–≥—É–ª—è—Ä–Ω–æ",
            "period": "–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞",
            "approach": "–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
        })
        
        material_creation_text = f"""
üîß **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"
**–¢–≤–æ–π –ø–ª–∞–Ω:** {plan_info['name']} - {plan_info['approach']}

–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {len(focus_statements)} —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.

**–ß—Ç–æ —è –±—É–¥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å:**
‚ú® **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
‚ú® **–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã** –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç—ã
‚ú® **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è** —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–≤–æ–µ–π —Ü–µ–ª—å—é
‚ú® **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –≤ —Ç–≤–æ–µ–º —Å—Ç–∏–ª–µ

**–ö–∞–∫ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å:**
‚Ä¢ {plan_info['duration']}
‚Ä¢ {plan_info['period']}
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º–∏ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏

**–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...**

–°–æ–∑–¥–∞—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª... üîß
        """
        
        keyboard = [
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª! üîß", callback_data="start_creation")],
            [InlineKeyboardButton("–û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚ùì", callback_data="explain_material")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(material_creation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _explain_material_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Explain material creation process"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        selected_plan = state_data.get("selected_plan", "")
        
        explanation_text = f"""
üìö **–ö–∞–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª**

**–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:**

**1. –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π**
‚Ä¢ –ò–∑—É—á–∞—é –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
‚Ä¢ –í—ã–¥–µ–ª—è—é –∫–ª—é—á–µ–≤—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è

**2. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞**
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Ç—Ä–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏

**3. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–≤–æ–π –ø–ª–∞–Ω**
‚Ä¢ {selected_plan.upper()} –ø–ª–∞–Ω: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥ —Ç–≤–æ–π —Ä–∏—Ç–º
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–≤–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º

**4. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é –∏—Ö –≤ –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –°–æ–∑–¥–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Ç–≤–æ–µ–º —Å—Ç–∏–ª–µ

**–†–µ–∑—É–ª—å—Ç–∞—Ç:**
–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–¥–∞–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –∏ —Ç–≤–æ–µ–π —Ü–µ–ª–∏!

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ? üîß
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ! üîß", callback_data="start_creation")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É üîô", callback_data="back_to_statements")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(explanation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _create_personalized_material(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create personalized material for the user"""
        user_id = update.effective_user.id
        
        # Get user's data
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        selected_plan = state_data.get("selected_plan", "")
        focus_statements = state_data.get("focus_statements", [])
        positive_feelings = state_data.get("positive_feelings", [])
        nervous_feelings = state_data.get("nervous_feelings", [])
        available_options = state_data.get("available_options", [])
        
        # Show creation progress
        creation_text = f"""
üîß **–°–æ–∑–¥–∞—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª...**

**–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:**
‚úÖ {len(focus_statements)} —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
‚úÖ {len(positive_feelings)} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á—É–≤—Å—Ç–≤
‚úÖ {len(nervous_feelings)} –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤
‚úÖ {len(available_options)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

**–°–æ–∑–¥–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è:**
üéØ –¶–µ–ª—å: "{target_goal}"
üìã –ü–ª–∞–Ω: {selected_plan.upper()}

**–ü—Ä–æ—Ü–µ—Å—Å:**
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... ‚è≥
2. –°–æ–∑–¥–∞—é –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è... ‚è≥
3. –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ —Ç–≤–æ–π –ø–ª–∞–Ω... ‚è≥
4. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª... ‚è≥
5. –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... ‚è≥

**‚è∞ –≠—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ –æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç.**

–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏... ‚è∞
        """
        
        await update.callback_query.edit_message_text(creation_text, parse_mode='Markdown')
        
        # Simulate initial material creation process
        await asyncio.sleep(2)  # Simulate processing time
        
        # Start task generation phase
        await self._start_task_generation_phase(update, context, focus_statements)
    
    async def _start_task_generation_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, focus_statements: list):
        """Start the task generation phase for each focus statement"""
        user_id = update.effective_user.id
        
        # Initialize task generation state
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "task_generation",
            "focus_statements": focus_statements,
            "current_focus_index": 0,
            "generated_tasks": [],
            "task_generation_started": True
        })
        
        # Start with first focus statement
        await self._ask_for_focus_statement_tasks(update, context, 0, focus_statements)
    
    async def _ask_for_focus_statement_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE, focus_index: int, focus_statements: list):
        """Ask user what should happen to feel a specific focus statement"""
        user_id = update.effective_user.id
        
        if focus_index >= len(focus_statements):
            # All focus statements processed, complete material creation
            await self._complete_material_creation(update, context)
            return
        
        # Get plan type to determine task limits
        state_data = await self.db_manager.get_user_state_data(user_id)
        selected_plan = state_data.get("selected_plan", "")
        
        # Set task limits based on plan type
        if selected_plan == "regular":
            max_tasks_per_focus = 3  # Extended for Regular plan
            task_text = "2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"
        else:
            max_tasks_per_focus = 1  # Optimized for Express and 2-week plans
            task_text = "1 –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π"
        
        current_statement = focus_statements[focus_index]
        progress = focus_index + 1
        total = len(focus_statements)
        
        task_generation_text = f"""
üéØ **–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {progress} –∏–∑ {total}**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{current_statement}"

–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —á—Ç–æ–±—ã —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

**–í–æ–ø—Ä–æ—Å:** –ß—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è –∏–ª–∏ —á—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å: "{current_statement}"?

**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ"
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 5 –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–±–æ—Ç—É"
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é"

**–ü–æ–¥–µ–ª–∏—Å—å {task_text} –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —ç—Ç–æ–º—É —á—É–≤—Å—Ç–≤—É.**

–ù–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á–∏... üìù
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∏–Ω–∞—é! üìù", callback_data="start_tasks")],
            [InlineKeyboardButton("–ù—É–∂–Ω—ã –ø—Ä–∏–º–µ—Ä—ã? üí°", callback_data="task_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(task_generation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _process_task_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process task input for current focus statement"""
        user_id = update.effective_user.id
        
        # Get current state
        state_data = await self.db_manager.get_user_state_data(user_id)
        current_focus_index = state_data.get("current_focus_index", 0)
        focus_statements = state_data.get("focus_statements", [])
        generated_tasks = state_data.get("generated_tasks", [])
        
        if current_focus_index >= len(focus_statements):
            return
        
        current_statement = focus_statements[current_focus_index]
        
        # Get current tasks for this focus statement
        current_focus_tasks = generated_tasks.get(str(current_focus_index), [])
        
        # Add new task
        task_id = len(current_focus_tasks) + 1
        new_task = {
            "task_id": f"{current_focus_index}_{task_id}",
            "focus_statement_id": current_focus_index,
            "focus_statement": current_statement,
            "task_number": task_id,
            "task_text": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown")
        }
        
        current_focus_tasks.append(new_task)
        generated_tasks[str(current_focus_index)] = current_focus_tasks
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {
            "generated_tasks": generated_tasks
        })
        
        # Get plan type to determine task limits
        state_data = await self.db_manager.get_user_state_data(user_id)
        selected_plan = state_data.get("selected_plan", "")
        
        # Set task limits based on plan type
        if selected_plan == "regular":
            max_tasks_per_focus = 3  # Extended for Regular plan
        else:
            max_tasks_per_focus = 1  # Optimized for Express and 2-week plans
        
        # Check if we have enough tasks for this focus statement
        if len(current_focus_tasks) >= max_tasks_per_focus:
            await self._ask_if_finished_focus_tasks(update, context, current_focus_index, focus_statements, current_focus_tasks)
        else:
            await self._ask_for_more_tasks(update, context, current_focus_index, focus_statements, current_focus_tasks, max_tasks_per_focus)
    
    async def _ask_for_more_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE, focus_index: int, focus_statements: list, current_tasks: list, max_tasks_per_focus: int):
        """Ask for more tasks for current focus statement"""
        current_statement = focus_statements[focus_index]
        remaining = max_tasks_per_focus - len(current_tasks)
        
        if remaining > 0:
            text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —ç—Ç—É –∑–∞–¥–∞—á—É.**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{current_statement}"

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {len(current_tasks)} –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ {remaining} –∑–∞–¥–∞—á–∞–º–∏.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω..."
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ..."
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å..."

–ß—Ç–æ –µ—â–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, —á—Ç–æ–±—ã —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ? üìù
            """
        else:
            # This shouldn't happen, but just in case
            text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —ç—Ç—É –∑–∞–¥–∞—á—É.**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{current_statement}"

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {len(current_tasks)} –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é!
            """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _ask_if_finished_focus_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE, focus_index: int, focus_statements: list, current_tasks: list):
        """Ask if user is finished with current focus statement tasks"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        selected_plan = state_data.get("selected_plan", "")
        
        current_statement = focus_statements[focus_index]
        progress = focus_index + 1
        total = len(focus_statements)
        
        # For Express and 2-week plans, automatically move to next focus statement
        if selected_plan != "regular":
            text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {len(current_tasks)} –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{current_statement}"

**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} –∏–∑ {total} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é... ‚è≠Ô∏è
            """
            await update.message.reply_text(text, parse_mode='Markdown')
            
            # Automatically move to next focus statement
            await self._move_to_next_focus_statement(update, context)
            return
        
        # For Regular plan, ask if user wants to add more tasks
        text = f"""
‚úÖ **–•–æ—Ä–æ—à–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å {len(current_tasks)} –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{current_statement}"

–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –∏–ª–∏ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.

**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} –∏–∑ {total} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

**–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?**
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é

–ù–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤" –∏–ª–∏ "–¥–∞–ª—å—à–µ", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –µ—â–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π.
        """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _move_to_next_focus_statement(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Move to next focus statement"""
        user_id = update.effective_user.id
        
        # Get current state
        state_data = await self.db_manager.get_user_state_data(user_id)
        current_focus_index = state_data.get("current_focus_index", 0)
        focus_statements = state_data.get("focus_statements", [])
        
        # Move to next focus statement
        next_index = current_focus_index + 1
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {
            "current_focus_index": next_index
        })
        
        # Ask for tasks for next focus statement
        await self._ask_for_focus_statement_tasks(update, context, next_index, focus_statements)
    
    async def _complete_material_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Complete material creation with all tasks"""
        user_id = update.effective_user.id
        
        # Get all data
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        selected_plan = state_data.get("selected_plan", "")
        focus_statements = state_data.get("focus_statements", [])
        positive_feelings = state_data.get("positive_feelings", [])
        nervous_feelings = state_data.get("nervous_feelings", [])
        available_options = state_data.get("available_options", [])
        generated_tasks = state_data.get("generated_tasks", {})
        
        # For Express and 2-week plans, add task selection phase
        if selected_plan in ["extreme", "2week"]:
            await self._start_task_selection_phase(update, context, generated_tasks, selected_plan)
        else:
            # For Regular plan, create material directly
            personalized_material = await self._generate_personalized_content_with_tasks(
                target_goal, selected_plan, focus_statements, 
                positive_feelings, nervous_feelings, available_options, generated_tasks
            )
            
            # Save material to database
            await self._save_personalized_material(user_id, personalized_material)
            
            # Show completion
            await self._show_material_completion(update, context, personalized_material)
    
    async def _start_task_selection_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, generated_tasks: dict, selected_plan: str):
        """Start task selection phase for Express and 2-week plans"""
        user_id = update.effective_user.id
        
        # Set task selection limits based on plan
        if selected_plan == "extreme":
            required_tasks = 6
            plan_name = "Express"
        elif selected_plan == "2week":
            required_tasks = 2
            plan_name = "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π"
        else:
            required_tasks = 3
            plan_name = "Regular"
        
        # Flatten all tasks into a single list for selection
        all_tasks = []
        for focus_id, tasks in generated_tasks.items():
            for task in tasks:
                task["focus_statement_id"] = int(focus_id)
                all_tasks.append(task)
        
        # Update state for task selection
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "task_selection",
            "all_tasks": all_tasks,
            "required_tasks": required_tasks,
            "selected_tasks": [],
            "task_selection_started": True
        })
        
        # Show task selection interface
        await self._show_task_selection_interface(update, context, all_tasks, required_tasks, plan_name)
    
    async def _show_task_selection_interface(self, update: Update, context: ContextTypes.DEFAULT_TYPE, all_tasks: list, required_tasks: int, plan_name: str):
        """Show task selection interface"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        selected_tasks = state_data.get("selected_tasks", [])
        
        selection_text = f"""
üéØ **–í—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á –¥–ª—è {plan_name} –ø–ª–∞–Ω–∞**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{state_data.get('final_target_goal', '')}"

–£ –º–µ–Ω—è –µ—Å—Ç—å {len(all_tasks)} –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.

**–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ {required_tasks} –∑–∞–¥–∞—á, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å:**

**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(selected_tasks)}/{required_tasks}):**
        """
        
        if selected_tasks:
            for i, task in enumerate(selected_tasks, 1):
                selection_text += f"\n**{i}.** {task['task_text']}"
        else:
            selection_text += "\n*–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ*"
        
        selection_text += f"""

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:**
        """
        
        # Show available tasks (not yet selected)
        available_tasks = [task for task in all_tasks if task not in selected_tasks]
        for i, task in enumerate(available_tasks[:10], 1):  # Show first 10
            focus_statement = task.get('focus_statement', 'Unknown')
            selection_text += f"\n**{i}.** {task['task_text']}"
            selection_text += f"\n   *–§–æ–∫—É—Å: {focus_statement}*"
        
        if len(available_tasks) > 10:
            selection_text += f"\n... –∏ –µ—â–µ {len(available_tasks) - 10} –∑–∞–¥–∞—á"
        
        selection_text += f"""

**–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å:**
‚Ä¢ –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1", "5", "12")
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤", –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ "—Å–±—Ä–æ—Å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

**–í—ã–±–µ—Ä–∏ {required_tasks - len(selected_tasks)} –∑–∞–¥–∞—á...** üìù
        """
        
        await update.message.reply_text(selection_text, parse_mode='Markdown')
    
    async def _process_task_selection_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process task selection input"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        all_tasks = state_data.get("all_tasks", [])
        selected_tasks = state_data.get("selected_tasks", [])
        required_tasks = state_data.get("required_tasks", 0)
        
        # Handle flow control commands
        if message_text.lower() in ["–≥–æ—Ç–æ–≤", "–¥–∞–ª—å—à–µ", "–≥–æ—Ç–æ–≤–æ"]:
            if len(selected_tasks) >= required_tasks:
                await self._complete_task_selection(update, context)
            else:
                remaining = required_tasks - len(selected_tasks)
                await update.message.reply_text(f"–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ {remaining} –∑–∞–¥–∞—á. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–æ—Ä... üìù")
            return
        
        if message_text.lower() in ["—Å–±—Ä–æ—Å", "–∑–∞–Ω–æ–≤–æ", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]:
            await self.db_manager.update_user_state_data(user_id, {
                "selected_tasks": []
            })
            await self._show_task_selection_interface(update, context, all_tasks, required_tasks, "—Ç–≤–æ–µ–≥–æ")
            return
        
        # Try to parse task number
        try:
            task_number = int(message_text.strip())
            if 1 <= task_number <= len(all_tasks):
                # Get the task (convert to 0-based index)
                task = all_tasks[task_number - 1]
                
                # Check if already selected
                if task in selected_tasks:
                    await update.message.reply_text("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é. üîÑ")
                    return
                
                # Add to selected tasks
                selected_tasks.append(task)
                
                # Update state
                await self.db_manager.update_user_state_data(user_id, {
                    "selected_tasks": selected_tasks
                })
                
                # Show updated selection
                await self._show_task_selection_interface(update, context, all_tasks, required_tasks, "—Ç–≤–æ–µ–≥–æ")
                
            else:
                await update.message.reply_text(f"–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(all_tasks)}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üî¢")
                
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 5, 12) –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É. üìù")
    
    async def _complete_task_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Complete task selection and create final material"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        selected_tasks = state_data.get("selected_tasks", [])
        target_goal = state_data.get("final_target_goal", "")
        selected_plan = state_data.get("selected_plan", "")
        focus_statements = state_data.get("focus_statements", [])
        positive_feelings = state_data.get("positive_feelings", [])
        nervous_feelings = state_data.get("nervous_feelings", [])
        available_options = state_data.get("available_options", [])
        
        # Create final material with selected tasks
        personalized_material = await self._generate_personalized_content_with_selected_tasks(
            target_goal, selected_plan, focus_statements, 
            positive_feelings, nervous_feelings, available_options, selected_tasks
        )
        
        # Save material to database
        await self._save_personalized_material(user_id, personalized_material)
        
        # Show completion
        await self._show_material_completion(update, context, personalized_material)
    
    async def _generate_personalized_content_with_selected_tasks(self, target_goal: str, selected_plan: str, 
                                                               focus_statements: list, positive_feelings: list, 
                                                               nervous_feelings: list, available_options: list, 
                                                               selected_tasks: list) -> dict:
        """Generate personalized content with selected tasks"""
        
        # Extract key phrases from focus statements
        key_phrases = []
        for statement in focus_statements:
            key_phrases.append(statement)
        
        # Create material structure with selected tasks
        material = {
            "target_goal": target_goal,
            "selected_plan": selected_plan,
            "focus_statements": focus_statements,
            "key_phrases": key_phrases,
            "positive_feelings": [f["statement"] for f in positive_feelings],
            "nervous_feelings": [f["statement"] for f in nervous_feelings],
            "available_options": [f["statement"] for f in available_options],
            "selected_tasks": selected_tasks,
            "total_tasks": len(selected_tasks),
            "created_at": context.bot_data.get("current_time", "unknown"),
            "material_type": "personalized_goal_achievement_with_selected_tasks"
        }
        
        return material
    
    async def _generate_personalized_content_with_tasks(self, target_goal: str, selected_plan: str, 
                                                      focus_statements: list, positive_feelings: list, 
                                                      nervous_feelings: list, available_options: list, 
                                                      generated_tasks: dict) -> dict:
        """Generate personalized content with tasks based on user data"""
        
        # Extract key phrases from focus statements
        key_phrases = []
        for statement in focus_statements:
            key_phrases.append(statement)
        
        # Create material structure with tasks
        material = {
            "target_goal": target_goal,
            "selected_plan": selected_plan,
            "focus_statements": focus_statements,
            "key_phrases": key_phrases,
            "positive_feelings": [f["statement"] for f in positive_feelings],
            "nervous_feelings": [f["statement"] for f in nervous_feelings],
            "available_options": [f["statement"] for f in available_options],
            "generated_tasks": generated_tasks,
            "total_tasks": sum(len(tasks) for tasks in generated_tasks.values()),
            "created_at": context.bot_data.get("current_time", "unknown"),
            "material_type": "personalized_goal_achievement_with_tasks"
        }
        
        return material
    
    async def _generate_personalized_content(self, target_goal: str, selected_plan: str, 
                                           focus_statements: list, positive_feelings: list, 
                                           nervous_feelings: list, available_options: list) -> dict:
        """Generate personalized content based on user data"""
        
        # Extract key phrases from focus statements
        key_phrases = []
        for statement in focus_statements:
            key_phrases.append(statement)
        
        # Create material structure
        material = {
            "target_goal": target_goal,
            "selected_plan": selected_plan,
            "focus_statements": focus_statements,
            "key_phrases": key_phrases,
            "positive_feelings": [f["statement"] for f in positive_feelings],
            "nervous_feelings": [f["statement"] for f in nervous_feelings],
            "available_options": [f["statement"] for f in available_options],
            "created_at": context.bot_data.get("current_time", "unknown"),
            "material_type": "personalized_goal_achievement"
        }
        
        return material
    
    async def _save_personalized_material(self, user_id: int, material: dict):
        """Save personalized material to database"""
        try:
            # Save to user state data
            await self.db_manager.update_user_state_data(user_id, {
                "personalized_material": material,
                "material_created": True,
                "material_created_at": material["created_at"]
            })
            
            # Log material creation
            logger.info(f"Created personalized material for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error saving personalized material: {e}")
    
    async def _show_material_completion(self, update: Update, context: ContextTypes.DEFAULT_TYPE, material: dict):
        """Show material creation completion"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        order_id = state_data.get("order_id", "")
        
        total_tasks = material.get('total_tasks', 0)
        focus_statements_count = len(material.get('focus_statements', []))
        selected_plan = material.get('selected_plan', '')
        
        # Show different completion messages based on plan type
        if selected_plan in ["extreme", "2week"]:
            # For Express and 2-week plans, show selected tasks
            selected_tasks = material.get('selected_tasks', [])
            completion_text = f"""
üéâ **–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¶–µ–ª—å:** "{material['target_goal']}"
üìã **–ü–ª–∞–Ω:** {material['selected_plan'].upper()}

**–ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:**
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚úÖ –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏
‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–≤–æ–π –ø–ª–∞–Ω
‚úÖ **{total_tasks} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á** –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏

**–¢–≤–æ–∏ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏:**
            """
            
            for i, task in enumerate(selected_tasks, 1):
                completion_text += f"\n**{i}.** {task['task_text']}"
            
            completion_text += """

**–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!** üöÄ

–¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–±—è –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.

**–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é?** üí™
            """
        else:
            # For Regular plan, show all tasks
            completion_text = f"""
üéâ **–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¶–µ–ª—å:** "{material['target_goal']}"
üìã **–ü–ª–∞–Ω:** {material['selected_plan'].upper()}

**–ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:**
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚úÖ –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏
‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–≤–æ–π –ø–ª–∞–Ω
‚úÖ **{total_tasks} –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á** –¥–ª—è {focus_statements_count} —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π

**–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!** üöÄ

–¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–±—è –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏ –≤–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

**–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é?** üí™
            """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É! üöÄ", callback_data="complete_setup")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª üìã", callback_data="view_material")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(completion_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_created_material(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show the created personalized material"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        material = state_data.get("personalized_material", {})
        
        if not material:
            text = "–ú–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª."
            await update.callback_query.edit_message_text(text)
            return
        
        material_text = f"""
üìã **–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª**

**üéØ –¶–µ–ª—å:** "{material.get('target_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
**üìã –ü–ª–∞–Ω:** {material.get('selected_plan', '–ù–µ —É–∫–∞–∑–∞–Ω').upper()}
**üìÖ –°–æ–∑–¥–∞–Ω:** {material.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

**üìù –§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({len(material.get('focus_statements', []))}):**
        """
        
        # Show first 5 focus statements
        focus_statements = material.get('focus_statements', [])
        for i, statement in enumerate(focus_statements[:5], 1):
            material_text += f"\n**{i}.** {statement}"
        
        if len(focus_statements) > 5:
            material_text += f"\n\n... –∏ –µ—â–µ {len(focus_statements) - 5} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
        
        material_text += f"""

**üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞ ({len(material.get('positive_feelings', []))}):**
        """
        
        # Show first 3 positive feelings
        positive_feelings = material.get('positive_feelings', [])
        for i, feeling in enumerate(positive_feelings[:3], 1):
            material_text += f"\n**{i}.** {feeling}"
        
        if len(positive_feelings) > 3:
            material_text += f"\n\n... –∏ –µ—â–µ {len(positive_feelings) - 3} —á—É–≤—Å—Ç–≤"
        
        material_text += f"""

**üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ({len(material.get('available_options', []))}):**
        """
        
        # Show all available options
        available_options = material.get('available_options', [])
        for i, option in enumerate(available_options, 1):
            material_text += f"\n**{i}.** {option}"
        
        # Show tasks if available
        selected_plan = material.get('selected_plan', '')
        
        if selected_plan in ["extreme", "2week"]:
            # Show selected tasks for Express and 2-week plans
            selected_tasks = material.get('selected_tasks', [])
            if selected_tasks:
                material_text += f"""

**üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ ({len(selected_tasks)}):**
                """
                
                for i, task in enumerate(selected_tasks, 1):
                    focus_statement = task.get('focus_statement', 'Unknown')
                    material_text += f"\n**{i}.** {task['task_text']}"
                    material_text += f"\n   *–§–æ–∫—É—Å: {focus_statement}*"
        else:
            # Show all tasks for Regular plan
            generated_tasks = material.get('generated_tasks', {})
            if generated_tasks:
                material_text += f"""

**üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({material.get('total_tasks', 0)}):**
                """
                
                # Show tasks for first 3 focus statements
                for i, (focus_id, tasks) in enumerate(list(generated_tasks.items())[:3]):
                    if i < len(focus_statements):
                        focus_statement = focus_statements[int(focus_id)]
                        material_text += f"\n\n**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {int(focus_id)+1}:** \"{focus_statement}\""
                        for j, task in enumerate(tasks[:2], 1):  # Show first 2 tasks
                            material_text += f"\n‚Ä¢ {task['task_text']}"
                        if len(tasks) > 2:
                            material_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(tasks) - 2} –∑–∞–¥–∞—á"
                
                if len(generated_tasks) > 3:
                    material_text += f"\n\n... –∏ –µ—â–µ {len(generated_tasks) - 3} —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏"
        
        material_text += """

**‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!**

–≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–¥–∞–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é.
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É! üöÄ", callback_data="complete_setup")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É üîô", callback_data="back_to_completion")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(material_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _process_key_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process key text input from user"""
        user_id = update.effective_user.id
        
        # Get current key texts
        state_data = await self.db_manager.get_user_state_data(user_id)
        key_texts = state_data.get("key_texts", [])
        
        # Add new text
        key_texts.append({
            "text": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown")
        })
        
        # Update state
        await self.db_manager.update_user_state_data(user_id, {"key_texts": key_texts})
        
        # Check if we have enough texts
        if len(key_texts) >= 3:
            await self._move_to_preferences(update, context)
        else:
            await self._ask_for_more_texts(update, context, len(key_texts))
    
    async def _ask_for_more_texts(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_count: int):
        """Ask for more key texts"""
        remaining = 3 - current_count
        
        if remaining > 1:
            text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.**

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å {current_count} –ø—Ä–∏–º–µ—Ä(–æ–≤). –ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ {remaining} –ø—Ä–∏–º–µ—Ä–∞–º–∏, —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω—è–ª —Ç–µ–±—è.

–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:
‚Ä¢ –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
‚Ä¢ –°–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ —Ü–µ–ª–∏
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ–º —Å–≤–æ–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
‚Ä¢ –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å —Ç–µ–±—è

–ß—Ç–æ –µ—â–µ —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å? üìù
            """
        else:
            text = """
‚úÖ **–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –ù—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä.**

–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å 2 –ø—Ä–∏–º–µ—Ä–∞. –ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ –æ–¥–Ω–∏–º –ø—Ä–∏–º–µ—Ä–æ–º, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢ –ï—â–µ –æ–¥–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ
‚Ä¢ –¢–≤–æ–∏ –º—ã—Å–ª–∏ –æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å —Ç–µ–±—è

–ö–∞–∫–æ–π —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–º–µ—Ä? üéØ
            """
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _move_to_preferences(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Move to preferences collection"""
        user_id = update.effective_user.id
        
        # Get user's goal for context
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        
        # Update setup step
        await self.db_manager.update_user_state_data(user_id, {"setup_step": 2})
        
        preferences_text = f"""
üéâ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞!**

–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ "{target_goal}":

**–Ø —Å–ø—Ä–æ—à—É —Ç–µ–±—è –æ:**
‚Ä¢ –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏ —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π! üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è! üöÄ", callback_data="start_preferences")],
            [InlineKeyboardButton("–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìù", callback_data="review_texts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(preferences_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _start_preferences_collection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start collecting user preferences"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        target_goal = state_data.get("final_target_goal", "")
        selected_plan = state_data.get("selected_plan", "")
        
        preferences_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏**

–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º, –∫–∞–∫ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ "{target_goal}":

**1. –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**
‚Ä¢ –ß–∞—Å—Ç–æ (–∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞) - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–æ (2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å) - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–µ–º–ø
‚Ä¢ –ü–æ –∑–∞–ø—Ä–æ—Å—É - –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å

**2. –§–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏:**
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è

**3. –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ –£—Ç—Ä–æ–º (6-10 —É—Ç—Ä–∞)
‚Ä¢ –î–Ω–µ–º (12-16 –¥–Ω—è)
‚Ä¢ –í–µ—á–µ—Ä–æ–º (18-22 –≤–µ—á–µ—Ä–∞)
‚Ä¢ –ì–∏–±–∫–æ (–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è)

**4. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –°—Ç—Ä–æ–≥–∏–π –∏ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –¥–µ–ª–æ–≤–æ–π
‚Ä¢ –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π

–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö! üéØ
        """
        
        await update.callback_query.edit_message_text(preferences_text, parse_mode='Markdown')
    
    async def _process_preference_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process preference input from user"""
        user_id = update.effective_user.id
        
        # Get current preferences
        state_data = await self.db_manager.get_user_state_data(user_id)
        preferences = state_data.get("preferences", {})
        
        # Simple keyword-based preference extraction
        message_lower = message_text.lower()
        
        # Frequency preference
        if any(word in message_lower for word in ["—á–∞—Å—Ç–æ", "–∫–∞–∂–¥—ã–µ", "–±—ã—Å—Ç—Ä–æ", "—á–∞—Å—Ç—ã–π"]):
            preferences["frequency"] = "frequent"
        elif any(word in message_lower for word in ["—É–º–µ—Ä–µ–Ω–Ω–æ", "—Å—Ç–∞–±–∏–ª—å–Ω–æ", "2-3", "–¥–≤–∞-—Ç—Ä–∏"]):
            preferences["frequency"] = "moderate"
        elif any(word in message_lower for word in ["–∑–∞–ø—Ä–æ—Å—É", "–Ω—É–∂–Ω–æ", "–∫–æ–≥–¥–∞", "–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"]):
            preferences["frequency"] = "on_demand"
        
        # Format preference
        if any(word in message_lower for word in ["–∫–æ—Ä–æ—Ç–∫–∏–µ", "–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ", "–∫—Ä–∞—Ç–∫–∏–µ"]):
            preferences["format"] = "short_motivational"
        elif any(word in message_lower for word in ["–ø–æ–¥—Ä–æ–±–Ω—ã–µ", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "—Å–æ–≤–µ—Ç—ã", "–¥–µ—Ç–∞–ª—å–Ω—ã–µ"]):
            preferences["format"] = "detailed_instructions"
        elif any(word in message_lower for word in ["–≤–æ–ø—Ä–æ—Å—ã", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è", "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è"]):
            preferences["format"] = "reflection_questions"
        elif any(word in message_lower for word in ["–∑–∞–¥–∞–Ω–∏—è", "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"]):
            preferences["format"] = "practical_tasks"
        
        # Time preference
        if any(word in message_lower for word in ["—É—Ç—Ä–æ–º", "—É—Ç—Ä–æ", "6-10", "—Ä–∞–Ω–Ω–µ–µ"]):
            preferences["time_preference"] = "morning"
        elif any(word in message_lower for word in ["–¥–Ω–µ–º", "–¥–µ–Ω—å", "12-16", "–ø–æ–ª–¥–µ–Ω—å"]):
            preferences["time_preference"] = "afternoon"
        elif any(word in message_lower for word in ["–≤–µ—á–µ—Ä–æ–º", "–≤–µ—á–µ—Ä", "18-22", "–ø–æ–∑–¥–Ω–µ–µ"]):
            preferences["time_preference"] = "evening"
        elif any(word in message_lower for word in ["–≥–∏–±–∫–æ", "–ª—é–±–æ–µ", "–∫–æ–≥–¥–∞", "–≤—Ä–µ–º—è"]):
            preferences["time_preference"] = "flexible"
        
        # Communication style
        if any(word in message_lower for word in ["—Å—Ç—Ä–æ–≥–∏–π", "—Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–∂–µ—Å—Ç–∫–∏–π"]):
            preferences["communication_style"] = "strict"
        elif any(word in message_lower for word in ["–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π", "–º—è–≥–∫–∏–π"]):
            preferences["communication_style"] = "friendly"
        elif any(word in message_lower for word in ["–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–¥–µ–ª–æ–≤–æ–π", "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π"]):
            preferences["communication_style"] = "professional"
        elif any(word in message_lower for word in ["–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "–º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π", "—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π"]):
            preferences["communication_style"] = "inspiring"
        
        # Update preferences
        await self.db_manager.update_user_state_data(user_id, {"preferences": preferences})
        
        # Check if we have enough preferences
        if len(preferences) >= 3:
            await self._move_to_review(update, context)
        else:
            await self._ask_for_more_preferences(update, context, preferences)
    
    async def _ask_for_more_preferences(self, update: Update, context: ContextTypes.DEFAULT_TYPE, preferences: Dict[str, Any]):
        """Ask for more preferences"""
        missing = []
        
        if "frequency" not in preferences:
            missing.append("—á–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        if "format" not in preferences:
            missing.append("—Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏")
        if "time_preference" not in preferences:
            missing.append("–≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        if "communication_style" not in preferences:
            missing.append("—Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è")
        
        if missing:
            text = f"""
‚úÖ **–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!**

–ú–Ω–µ –µ—â–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ:
‚Ä¢ {', '.join(missing)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö! üéØ
            """
        else:
            text = """
‚úÖ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã!**

–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∑–≤–æ–ª—å –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–≤–æ–¥–∫—É —Ç–≤–æ–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
            """
            await self._move_to_review(update, context)
            return
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def _move_to_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Move to setup review"""
        user_id = update.effective_user.id
        
        # Update setup step
        await self.db_manager.update_user_state_data(user_id, {"setup_step": 3})
        
        await self._show_setup_review(update, context)
    
    async def _show_setup_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show setup review"""
        user_id = update.effective_user.id
        
        # Get setup data
        state_data = await self.db_manager.get_user_state_data(user_id)
        key_texts = state_data.get("key_texts", [])
        preferences = state_data.get("preferences", {})
        target_goal = state_data.get("final_target_goal", "")
        order_id = state_data.get("order_id", "")
        
        # Format preferences for display
        frequency_map = {
            "frequent": "–ß–∞—Å—Ç–æ (–∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞)",
            "moderate": "–£–º–µ—Ä–µ–Ω–Ω–æ (2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)",
            "on_demand": "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
        }
        
        format_map = {
            "short_motivational": "–ö–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "detailed_instructions": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã",
            "reflection_questions": "–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
            "practical_tasks": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è"
        }
        
        time_map = {
            "morning": "–£—Ç—Ä–æ–º (6-10 —É—Ç—Ä–∞)",
            "afternoon": "–î–Ω–µ–º (12-16 –¥–Ω—è)",
            "evening": "–í–µ—á–µ—Ä–æ–º (18-22 –≤–µ—á–µ—Ä–∞)",
            "flexible": "–ì–∏–±–∫–æ (–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è)"
        }
        
        style_map = {
            "strict": "–°—Ç—Ä–æ–≥–∏–π –∏ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
            "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π",
            "professional": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –¥–µ–ª–æ–≤–æ–π",
            "inspiring": "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π"
        }
        
        # Format review
        review_text = f"""
üìã **–û–±–∑–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"

**‚úÖ –°–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {len(key_texts)} –ø—Ä–∏–º–µ—Ä–æ–≤
**‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:** {frequency_map.get(preferences.get('frequency'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**‚úÖ –§–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏:** {format_map.get(preferences.get('format'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**‚úÖ –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏–π:** {time_map.get(preferences.get('time_preference'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:** {style_map.get(preferences.get('communication_style'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

**üéØ –°–≤–æ–¥–∫–∞ —Ç–≤–æ–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
–¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é —Ü–µ–ª—å, —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏.

–ì–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é? üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="complete_setup")],
            [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data="edit_preferences")],
            [InlineKeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="review_texts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(review_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _complete_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Complete setup and start goal achievement process"""
        user_id = update.effective_user.id
        
        # Get setup data
        state_data = await self.db_manager.get_user_state_data(user_id)
        key_texts = [text["text"] for text in state_data.get("key_texts", [])]
        preferences = state_data.get("preferences", {})
        target_goal = state_data.get("final_target_goal", "")
        order_id = state_data.get("order_id", "")
        selected_plan = state_data.get("selected_plan", "")
        
        # Save to user settings
        await self.db_manager.update_user_settings(user_id, key_texts, preferences)
        
        # Update subscription status to active
        await self.db_manager.update_subscription_status(order_id, "active")
        
        # Send admin notification
        await admin_notifications.notify_setup_complete(user_id, order_id, target_goal, selected_plan)
        
        # Update state to active subscription
        await self.db_manager.set_user_state(user_id, "active_subscription", {
            "order_id": order_id,
            "target_goal": target_goal,
            "selected_plan": selected_plan,
            "setup_completed": True
        })
        
        # Show completion announcement and start timing confirmation
        await self._show_setup_completion_announcement(update, context, order_id, target_goal, selected_plan)
    
    async def _show_setup_completion_announcement(self, update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str, target_goal: str, selected_plan: str):
        """Show setup completion announcement and start timing confirmation"""
        user_id = update.effective_user.id
        
        # Get user's timezone and name
        state_data = await self.db_manager.get_user_state_data(user_id)
        user_timezone = state_data.get("timezone", "UTC")
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        
        # Set timing schedule based on plan
        if selected_plan == "extreme":
            messages_per_day = 6
            time_interval = "–∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞"
            plan_name = "Express"
        elif selected_plan == "2week":
            messages_per_day = 1
            time_interval = "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            plan_name = "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π"
        else:
            messages_per_day = 1
            time_interval = "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            plan_name = "Regular"
        
        announcement_text = f"""
üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user_name}!**

**–ú—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–∞–º—É—é —Å–ª–æ–∂–Ω—É—é —á–∞—Å—Ç—å!** 

–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω, –∏ —Ç–µ–ø–µ—Ä—å –º—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é.

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"
üìã **–ü–ª–∞–Ω:** {plan_name}

**üö® –í–ê–ñ–ù–û: –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω—É–∂–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å!**

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è {time_interval} –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è.

**üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ **{messages_per_day} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å**
‚Ä¢ **–í—Ä–µ–º—è:** –í —Ç–≤–æ–∏—Ö –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö —á–∞—Å–∞—Ö (—Ç–≤–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {user_timezone})
‚Ä¢ **–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å:** –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!

**üéØ –°–µ–π—á–∞—Å –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!**

–î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã —Ç—ã –ø–æ–Ω—è–ª, –∫–∞–∫ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.

**–ì–æ—Ç–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è –∏ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É?** ‚è∞
        """
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è ‚è∞", callback_data="confirm_timing")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üïê", callback_data="change_timing")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É! üéØ", callback_data="start_first_task")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(announcement_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _confirm_timing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Confirm current timing schedule"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        selected_plan = state_data.get("selected_plan", "")
        user_timezone = state_data.get("timezone", "UTC")
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        
        # Set timing schedule based on plan
        if selected_plan == "extreme":
            messages_per_day = 6
            time_interval = "–∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞"
            plan_name = "Express"
        elif selected_plan == "2week":
            messages_per_day = 1
            time_interval = "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            plan_name = "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π"
        else:
            messages_per_day = 1
            time_interval = "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            plan_name = "Regular"
        
        confirmation_text = f"""
‚úÖ **–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!**

**{user_name}, —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**
‚Ä¢ **–ü–ª–∞–Ω:** {plan_name}
‚Ä¢ **–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å:** {messages_per_day}
‚Ä¢ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {time_interval}
‚Ä¢ **–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞:** {user_timezone}
‚Ä¢ **–í—Ä–µ–º—è:** –í —Ç–≤–æ–∏—Ö –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö —á–∞—Å–∞—Ö

**üéØ –¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏!**

–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É.

**–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É?** üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É! üéØ", callback_data="start_first_task")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üïê", callback_data="change_timing")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(confirmation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _change_timing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Allow user to change timing schedule"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        selected_plan = state_data.get("selected_plan", "")
        user_timezone = state_data.get("timezone", "UTC")
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        
        # Set timing schedule based on plan
        if selected_plan == "extreme":
            messages_per_day = 6
            time_interval = "–∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞"
            plan_name = "Express"
        elif selected_plan == "2week":
            messages_per_day = 1
            time_interval = "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            plan_name = "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π"
        else:
            messages_per_day = 1
            time_interval = "–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            plan_name = "Regular"
        
        change_timing_text = f"""
üïê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏**

**{user_name}, —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**
‚Ä¢ **–ü–ª–∞–Ω:** {plan_name}
‚Ä¢ **–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å:** {messages_per_day}
‚Ä¢ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {time_interval}
‚Ä¢ **–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞:** {user_timezone}

**–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?**

**–í–∞—Ä–∏–∞–Ω—Ç—ã:**
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å

**–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:**
        """
        
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É üåç", callback_data="change_timezone")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ‚è∞", callback_data="change_start_time")],
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å ‚úÖ", callback_data="confirm_timing")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(change_timing_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _start_first_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the first task to demonstrate the working process"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        selected_plan = state_data.get("selected_plan", "")
        target_goal = state_data.get("final_target_goal", "")
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        order_id = state_data.get("order_id", "")
        
        # Get first task from material
        material = state_data.get("personalized_material", {})
        
        if selected_plan in ["extreme", "2week"]:
            selected_tasks = material.get("selected_tasks", [])
            if selected_tasks:
                first_task = selected_tasks[0]
                task_text = first_task.get("task_text", "–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞")
                focus_statement = first_task.get("focus_statement", "–¢–≤–æ–µ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            else:
                task_text = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é"
                focus_statement = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏"
        else:
            # For Regular plan, use first focus statement
            focus_statements = material.get("focus_statements", [])
            if focus_statements:
                focus_statement = focus_statements[0]
                task_text = f"–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥: {focus_statement}"
            else:
                task_text = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é"
                focus_statement = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏"
        
        # Save active task to database
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "task_work",
            "active_task": {
                "task_text": task_text,
                "focus_statement": focus_statement,
                "task_id": first_task.get("task_id", "first_task") if selected_plan in ["extreme", "2week"] else "first_task",
                "order_id": order_id,
                "started_at": context.bot_data.get("current_time", "unknown")
            }
        })
        
        first_task_text = f"""
üéØ **–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫!**

**{user_name}, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º, –∫–∞–∫ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å!**

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"
**–ü–ª–∞–Ω:** {selected_plan.upper()}

**üéØ –ó–∞–¥–∞—á–∞:**
**{task_text}**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{focus_statement}"

**–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π –∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å, –Ω–æ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.**

**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?** 

–î–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å, –µ—Å–ª–∏ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –º–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä. 

–¢–æ –µ—Å—Ç—å –ª—é–±–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏! üòä

**–ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å!**

**–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?** üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–°–¥–µ–ª–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ! ‚úÖ", callback_data="task_movement_done")],
            [InlineKeyboardButton("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? ‚ùì", callback_data="task_help")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é! üéØ", callback_data="start_goal_work")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(first_task_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _handle_task_movement_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle task movement completion and ask for user response"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        
        # Update state to collect user response
        await self.db_manager.update_user_state_data(user_id, {
            "current_question_type": "task_response_collection"
        })
        
        response_text = f"""
‚úÖ **–û—Ç–ª–∏—á–Ω–æ, {user_name}!**

–¢—ã —Å–¥–µ–ª–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏! 

**–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ:**

**1. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–¥–µ–ª–∞–ª?**
–û–ø–∏—à–∏, –∫–∞–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç—ã —Å–¥–µ–ª–∞–ª –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.

**2. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ?**
–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –∏ –æ—â—É—â–µ–Ω–∏—è–º–∏.

**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ "–Ø –æ–±–Ω–æ–≤–∏–ª —Ä–µ–∑—é–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª 3 –∑–∞—è–≤–∫–∏. –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ!"
‚Ä¢ "–Ø –≤—ã–±—Ä–∞–ª 3 —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å –≤–∏–∑—ã. –ß—É–≤—Å—Ç–≤—É—é –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ!"
‚Ä¢ "–Ø –Ω–∞–∑–Ω–∞—á–∏–ª –≤—Å—Ç—Ä–µ—á—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ß—É–≤—Å—Ç–≤—É—é –Ω–µ–±–æ–ª—å—à–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –∏ —Ä–∞–¥–æ—Å—Ç—å!"

**–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º!** üìù
        """
        
        await update.callback_query.edit_message_text(response_text, parse_mode='Markdown')
    
    async def _process_task_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process user's task response and feelings"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        active_task = state_data.get("active_task", {})
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        selected_plan = state_data.get("selected_plan", "")
        
        # Store user response and feelings
        task_response = {
            "user_response": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown"),
            "task_id": active_task.get("task_id", "first_task"),
            "order_id": active_task.get("order_id", "")
        }
        
        # Update state with response
        await self.db_manager.update_user_state_data(user_id, {
            "task_response": task_response,
            "current_question_type": "task_feelings_collection"
        })
        
        # Ask about feelings
        feelings_text = f"""
üìù **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç, {user_name}!**

–Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª.

**–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö:**

**–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, —á—Ç–æ —Å–¥–µ–ª–∞–ª?**

**–ü—Ä–∏–º–µ—Ä—ã —á—É–≤—Å—Ç–≤:**
‚Ä¢ "–ß—É–≤—Å—Ç–≤—É—é –≥–æ—Ä–¥–æ—Å—Ç—å –∑–∞ —Å–µ–±—è"
‚Ä¢ "–ß—É–≤—Å—Ç–≤—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å"
‚Ä¢ "–ß—É–≤—Å—Ç–≤—É—é –Ω–µ–±–æ–ª—å—à–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
‚Ä¢ "–ß—É–≤—Å—Ç–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö"
‚Ä¢ "–ß—É–≤—Å—Ç–≤—É—é –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞–¥–æ—Å—Ç—å"

**–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏!** üòä
        """
        
        await update.message.reply_text(feelings_text, parse_mode='Markdown')
    
    async def _process_task_feelings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """Process user's feelings and provide reinforcement"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        task_response = state_data.get("task_response", {})
        active_task = state_data.get("active_task", {})
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        selected_plan = state_data.get("selected_plan", "")
        
        # Store feelings
        task_feelings = {
            "feelings": message_text,
            "timestamp": context.bot_data.get("current_time", "unknown")
        }
        
        # Complete task data
        complete_task_data = {
            "task_response": task_response,
            "task_feelings": task_feelings,
            "active_task": active_task,
            "completed_at": context.bot_data.get("current_time", "unknown")
        }
        
        # Save complete task data
        await self.db_manager.update_user_state_data(user_id, {
            "complete_task_data": complete_task_data,
            "current_question_type": "task_completed"
        })
        
        # Provide reinforcement and remind of next iteration
        reinforcement_text = f"""
üéâ **–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, {user_name}!**

–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–µ–π! 

**–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª:**
{task_response.get('user_response', '–î–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏')}

**–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å:**
{message_text}

**üåü –¢—ã –º–æ–ª–æ–¥–µ—Ü!** –ö–∞–∂–¥–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É!

**–ß—Ç–æ –¥–∞–ª—å—à–µ:**
–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ({selected_plan.upper()} –ø–ª–∞–Ω), –∏ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å —Ç–∞–∫–∏–µ –∂–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏.

**–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏!** üí™

**–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é?** üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é! üéØ", callback_data="start_goal_work")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø–ª–∞–Ω üìã", callback_data="view_plan")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(reinforcement_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _change_timezone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Allow user to change timezone"""
        change_timezone_text = """
üåç **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã**

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ "UTC+3" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ú–æ—Å–∫–≤—ã)
‚Ä¢ "Europe/Moscow"
‚Ä¢ "Asia/Tokyo"
‚Ä¢ "America/New_York"

–ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.
        """
        
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="change_timing")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(change_timezone_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _change_start_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Allow user to change start time"""
        change_start_time_text = """
‚è∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞**

–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:
‚Ä¢ "9:00" (9 —É—Ç—Ä–∞)
‚Ä¢ "10:30" (10:30 —É—Ç—Ä–∞)
‚Ä¢ "14:00" (2 –¥–Ω—è)

–ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.
        """
        
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="change_timing")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(change_start_time_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _handle_task_completed(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle task completion"""
        task_completed_text = """
‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**

–¢—ã –ø–æ–Ω—è–ª, –∫–∞–∫ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å! –¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Å–≤–æ–µ–π —Ü–µ–ª—å—é.

**–ß—Ç–æ –¥–∞–ª—å—à–µ:**
–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –∏ —Ç—ã –±—É–¥–µ—à—å –∏—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å.

**–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é?** üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é! üéØ", callback_data="start_goal_work")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø–ª–∞–Ω üìã", callback_data="view_plan")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(task_completed_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_task_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help for task completion"""
        task_help_text = """
‚ùì **–ü–æ–º–æ—â—å —Å –∑–∞–¥–∞—á–µ–π**

**–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É:**
1. –ü—Ä–æ—á–∏—Ç–∞–π –∑–∞–¥–∞—á—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ
2. –ü–æ–¥—É–º–∞–π, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
3. –í—ã–ø–æ–ª–Ω–∏ –¥–µ–π—Å—Ç–≤–∏–µ
4. –ù–∞–ø–∏—à–∏, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å

**–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:**
‚Ä¢ "–Ø –æ–±–Ω–æ–≤–∏–ª —Ä–µ–∑—é–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª 3 –∑–∞—è–≤–∫–∏"
‚Ä¢ "–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"
‚Ä¢ "–Ø –∏–∑—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"

**–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è:**
‚Ä¢ –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω–æ
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥

**–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?** üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞! üéØ", callback_data="start_first_task")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é! üöÄ", callback_data="start_goal_work")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(task_help_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _start_goal_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start regular goal work"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        
        target_goal = state_data.get("final_target_goal", "")
        selected_plan = state_data.get("selected_plan", "")
        user_name = state_data.get("first_name", "–î—Ä—É–≥")
        
        start_work_text = f"""
üöÄ **–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é!**

**{user_name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!**

–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Å–≤–æ–µ–π —Ü–µ–ª–∏!

**–¢–≤–æ—è —Ü–µ–ª—å:** "{target_goal}"
**–ü–ª–∞–Ω:** {selected_plan.upper()}

**–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ:**
–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –¢—ã –±—É–¥–µ—à—å –∏—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏.

**–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!** üí™

**–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏?** üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ü–µ–ª–∏! üéØ", callback_data="start_goal_work")],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø–ª–∞–Ω üìã", callback_data="view_plan")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(start_work_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    
    async def _show_setup_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show setup help"""
        help_text = """
‚ùì **Setup Help**

I'm here to help you complete your setup! Here's what I need:

**For Key Texts:**
‚Ä¢ Share examples of your writing style
‚Ä¢ Provide links to content you like
‚Ä¢ Describe your brand voice

**For Preferences:**
‚Ä¢ Tell me your content length preference
‚Ä¢ Share topics you're interested in
‚Ä¢ Let me know your posting schedule

Use the buttons below or type your responses directly! üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù Share Key Texts", callback_data="start_key_texts")],
            [InlineKeyboardButton("‚öôÔ∏è Set Preferences", callback_data="start_preferences")],
            [InlineKeyboardButton("üìã Review Setup", callback_data="review_setup")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "start_key_texts":
            await self._start_positive_feelings_collection(update, context)
        elif query.data == "ready_for_positive":
            await self._start_positive_feelings_collection(update, context)
        elif query.data == "ready_for_nervous":
            await self._move_to_nervous_feelings(update, context)
        elif query.data == "ready_for_options":
            await self._move_to_available_options(update, context)
        elif query.data == "start_transformation":
            await self._start_transformation_process(update, context)
        elif query.data == "complete_setup":
            await self._complete_setup(update, context)
        elif query.data == "setup_explanation":
            await self._show_setup_explanation(update, context)
        elif query.data == "positive_examples":
            await self._show_positive_examples(update, context)
        elif query.data == "nervous_examples":
            await self._show_nervous_examples(update, context)
        elif query.data == "options_examples":
            await self._show_options_examples(update, context)
        elif query.data == "show_nervous":
            await self._show_nervous_review(update, context)
        elif query.data == "view_all_statements":
            await self._show_all_focus_statements(update, context)
        elif query.data == "create_material":
            await self._start_material_creation(update, context)
        elif query.data == "explain_material":
            await self._explain_material_creation(update, context)
        elif query.data == "start_creation":
            await self._create_personalized_material(update, context)
        elif query.data == "view_material":
            await self._show_created_material(update, context)
        elif query.data == "back_to_statements":
            await self._show_final_focus_statements(update, context, state_data.get("focus_statements", []))
        elif query.data == "start_tasks":
            await self._ask_for_focus_statement_tasks(update, context, state_data.get("current_focus_index", 0), state_data.get("focus_statements", []))
        elif query.data == "task_examples":
            await self._show_task_examples(update, context)
        elif query.data == "confirm_timing":
            await self._confirm_timing(update, context)
        elif query.data == "change_timing":
            await self._change_timing(update, context)
        elif query.data == "start_first_task":
            await self._start_first_task(update, context)
        elif query.data == "change_timezone":
            await self._change_timezone(update, context)
        elif query.data == "change_start_time":
            await self._change_start_time(update, context)
        elif query.data == "task_completed":
            await self._handle_task_completed(update, context)
        elif query.data == "task_help":
            await self._show_task_help(update, context)
        elif query.data == "start_goal_work":
            await self._start_goal_work(update, context)
        elif query.data == "task_movement_done":
            await self._handle_task_movement_done(update, context)
    
    async def _show_task_examples(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show examples of tasks for focus statements"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        current_focus_index = state_data.get("current_focus_index", 0)
        focus_statements = state_data.get("focus_statements", [])
        
        if current_focus_index < len(focus_statements):
            current_statement = focus_statements[current_focus_index]
        else:
            current_statement = "—Ç–≤–æ–µ —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        
        examples_text = f"""
üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è —Ñ–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**

**–§–æ–∫—É—Å-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** "{current_statement}"

**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**

**–î–ª—è —á—É–≤—Å—Ç–≤–∞ –≥–æ—Ä–¥–æ—Å—Ç–∏:**
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É"

**–î–ª—è —á—É–≤—Å—Ç–≤–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É"
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞–≤—ã–∫–µ"

**–î–ª—è —á—É–≤—Å—Ç–≤–∞ –æ–±–ª–µ–≥—á–µ–Ω–∏—è:**
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É"
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"

**–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å:**
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω –Ω–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫—É"
‚Ä¢ "–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—É—Å–∫"
‚Ä¢ "–Ø –¥–æ–ª–∂–µ–Ω —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"

**–ì–ª–∞–≤–Ω–æ–µ:** –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º–∏!

–ì–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏? üìù
        """
        
        keyboard = [
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞—é! üìù", callback_data="start_tasks")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ üîô", callback_data="back_to_task")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(examples_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_setup_explanation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show detailed setup explanation"""
        explanation_text = """
üìö **Setup Process Explained**

**Step 1: Key Texts Collection**
I'll ask you to share examples of content that represents your style. This helps me understand:
‚Ä¢ Your writing tone and voice
‚Ä¢ Your preferred content structure
‚Ä¢ Your communication style
‚Ä¢ Your brand personality

**Step 2: Preferences Setup**
I'll collect information about:
‚Ä¢ Content length preferences
‚Ä¢ Topics you're interested in
‚Ä¢ When you prefer to receive content
‚Ä¢ Any specific requirements

**Step 3: Review & Confirm**
You'll review everything before we proceed to payment.

This process ensures your content is perfectly tailored to your needs! üéØ
        """
        
        keyboard = [[InlineKeyboardButton("Got it! Let's start! üöÄ", callback_data="start_key_texts")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(explanation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_text_examples(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show examples of key texts"""
        examples_text = """
üí° **Key Text Examples**

Here are some examples of what you can share:

**Blog Post Example:**
"5 Tips for Better Time Management in 2024..."

**Social Media Post:**
"Just finished an amazing project! Here's what I learned..."

**Email Example:**
"Hi team, I wanted to share some exciting updates..."

**Brand Voice Description:**
"We're professional yet approachable, always focusing on practical solutions..."

**Content You Admire:**
"Check out this article that perfectly captures our style: [link]"

Share any of these types of examples! üìù
        """
        
        keyboard = [[InlineKeyboardButton("Ready to share! üìù", callback_data="ready_for_texts")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(examples_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_text_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show review of collected texts"""
        user_id = update.effective_user.id
        state_data = await self.db_manager.get_user_state_data(user_id)
        key_texts = state_data.get("key_texts", [])
        
        if not key_texts:
            text = "No key texts collected yet. Please share some examples first!"
        else:
            text = f"**üìù Key Texts Collected ({len(key_texts)}):**\n\n"
            for i, text_data in enumerate(key_texts, 1):
                text += f"**{i}.** {text_data['text'][:100]}{'...' if len(text_data['text']) > 100 else ''}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ Looks good!", callback_data="complete_setup")],
            [InlineKeyboardButton("üîô Back to Setup", callback_data="back_to_setup")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _edit_preferences(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Allow user to edit preferences"""
        user_id = update.effective_user.id
        
        # Reset preferences
        await self.db_manager.update_user_state_data(user_id, {"preferences": {}})
        
        edit_text = """
‚úèÔ∏è **Edit Preferences**

Let's update your preferences. Please tell me:

**1. Content Length:** Short, Medium, or Long?
**2. Topics:** What topics interest you?
**3. Posting Schedule:** When do you prefer to receive content?

Please share your updated preferences! üéØ
        """
        
        await update.callback_query.edit_message_text(edit_text, parse_mode='Markdown')
