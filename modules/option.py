"""
Option Module
Handles subscription plan selection with three main scenarios: Extreme, 2-week, and Regular.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Dict, Any
from modules.admin_notifications import admin_notifications

logger = logging.getLogger(__name__)

class OptionModule:
    def __init__(self, db_manager, state_manager, bot_instance=None):
        self.db_manager = db_manager
        self.state_manager = state_manager
        self.bot_instance = bot_instance
        
        # Define goal-oriented subscription plans
        self.subscription_plans = {
            "extreme": {
                "name": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
                "duration": "7 –¥–Ω–µ–π",
                "price": "‚ÇΩ4,990",
                "approach": "10-15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞",
                "result_time": "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
                "features": [
                    "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é",
                    "10-15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞",
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏",
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é"
                ],
                "description": "–î–ª—è —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ."
            },
            "2week": {
                "name": "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω",
                "duration": "14 –¥–Ω–µ–π",
                "price": "‚ÇΩ2,490",
                "approach": "15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
                "result_time": "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ 2 –Ω–µ–¥–µ–ª–∏",
                "features": [
                    "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é",
                    "15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
                    "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "3 –ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                ],
                "description": "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏."
            },
            "regular": {
                "name": "–û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω",
                "duration": "30 –¥–Ω–µ–π",
                "price": "‚ÇΩ990",
                "approach": "–†–∞–∑ –≤ –¥–µ–Ω—å, –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                "result_time": "–£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º–µ—Å—è—Ü",
                "features": [
                    "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é",
                    "–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–¥—Ö–æ–¥",
                    "–ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ–±–ª–µ–º—É",
                    "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "1 –ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "–ú—è–≥–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                ],
                "description": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–π –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏."
            }
        }
    
    async def start_option_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the goal collection and option selection process"""
        user_id = update.effective_user.id
        
        # Get user profile for personalized greeting
        user_profile = await self.db_manager.get_user_profile(user_id)
        user_name = user_profile.get("first_name", "") if user_profile else ""
        
        # Update user state to goal collection
        await self.db_manager.set_user_state(user_id, "option_selection", {"step": "goal_collection"})
        
        await self._collect_user_goal(update, context, user_name)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle messages during option selection"""
        user_id = update.effective_user.id
        message_text = update.message.text
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        current_step = user_state_data.get("step", "goal_collection")
        
        if current_step == "goal_collection":
            # Store user's goal and move to plan selection
            await self._process_goal_input(update, context, message_text)
        elif current_step == "plan_selection":
            # Handle plan selection
            message_text_lower = message_text.lower()
            if any(plan in message_text_lower for plan in ["extreme", "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π", "2week", "2-week", "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π", "–¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã–π", "regular", "basic", "–æ–±—ã—á–Ω—ã–π", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"]):
                if "extreme" in message_text_lower or "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π" in message_text_lower:
                    await self._select_plan(update, context, "extreme")
                elif "2week" in message_text_lower or "2-week" in message_text_lower or "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π" in message_text_lower or "–¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã–π" in message_text_lower:
                    await self._select_plan(update, context, "2week")
                elif "regular" in message_text_lower or "basic" in message_text_lower or "–æ–±—ã—á–Ω—ã–π" in message_text_lower or "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" in message_text_lower:
                    await self._select_plan(update, context, "regular")
            else:
                # Show help message
                await self._show_help_message(update, context)
        elif current_step == "goal_validation":
            # Handle goal validation response
            await self._process_goal_validation(update, context, message_text)
        elif current_step == "intermediate_goal_collection":
            # Handle intermediate goal input
            await self._process_intermediate_goal(update, context, message_text)
    
    async def _show_plan_overview(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_name: str = ""):
        """Show overview of all available plans"""
        user_id = update.effective_user.id
        
        if user_name:
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        else:
            greeting = ""
        
        # Get personalized recommendation
        recommendation = await self._get_personalized_recommendation(user_id)
            
        overview_text = f"""
{greeting}üíé **–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏**

–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º:

**üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ4,990/–º–µ—Å—è—Ü
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π

**‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ2,490/–º–µ—Å—è—Ü  
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥

**üìù –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ990/–º–µ—Å—è—Ü
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ú—è–≥–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è

–ö–∞–∂–¥—ã–π –ø–ª–∞–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ "–≤–∑–ª–æ–º–∞—Ç—å" —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–∏—á—å –º–µ—á—Ç—ã! üéØ

{recommendation}

–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ! üëá
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø–ª–∞–Ω—ã", callback_data="compare_plans")],
            [InlineKeyboardButton("üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π", callback_data="plan_extreme")],
            [InlineKeyboardButton("‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="plan_2week")],
            [InlineKeyboardButton("üìù –û–±—ã—á–Ω—ã–π", callback_data="plan_regular")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(overview_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_plan_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_key: str):
        """Show detailed information about a specific plan"""
        plan = self.subscription_plans[plan_key]
        
        features_text = "\n".join([f"‚úÖ {feature}" for feature in plan["features"]])
        
        details_text = f"""
üéØ **{plan['name']}**

üí∞ **–¶–µ–Ω–∞:** {plan['price']} –Ω–∞ {plan['duration']}

üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**
{plan['description']}

‚ú® **–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
{features_text}

–ì–æ—Ç–æ–≤ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω? üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton(f"‚úÖ –í—ã–±—Ä–∞—Ç—å {plan['name']}", callback_data=f"select_{plan_key}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="back_to_plans")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="ask_plan_questions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(details_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_plan_comparison(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show detailed comparison of all plans"""
        comparison_text = """
üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤**

| –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ | –û–±—ã—á–Ω—ã–π | 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π | –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π |
|----------------|---------|-------------|---------------|
| **–¶–µ–Ω–∞** | ‚ÇΩ990 | ‚ÇΩ2,490 | ‚ÇΩ4,990 |
| **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** | 7 –¥–Ω–µ–π | 14 –¥–Ω–µ–π | 30 –¥–Ω–µ–π |
| **–ß–∞—Å—Ç–æ—Ç–∞** | –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ | –ö–∞–∂–¥—ã–µ 2 –¥–Ω—è | –ï–∂–µ–¥–Ω–µ–≤–Ω–æ |
| **–ü–æ–¥–¥–µ—Ä–∂–∫–∞** | –ë–∞–∑–æ–≤–∞—è | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è |
| **–ü—Ä–∞–≤–∫–∏** | 1 –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç | 3 –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç | –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π |
| **–®–∞–±–ª–æ–Ω—ã** | –ë–∞–∑–æ–≤—ã–µ | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ | –ü—Ä–µ–º–∏—É–º |

**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ **–û–±—ã—á–Ω—ã–π**: –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –º—è–≥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
‚Ä¢ **2-–Ω–µ–¥–µ–ª—å–Ω—ã–π**: –û—Ç–ª–∏—á–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ **–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π**: –î–ª—è —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∫ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–∞–º

–ö–∞–∫–æ–π –ø–ª–∞–Ω —Ç–µ–±—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_regular")],
            [InlineKeyboardButton("‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_2week")],
            [InlineKeyboardButton("üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_extreme")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É", callback_data="back_to_overview")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(comparison_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _select_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_key: str):
        """Handle plan selection"""
        user_id = update.effective_user.id
        plan = self.subscription_plans[plan_key]
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        
        user_goal = user_state_data.get("user_goal", "")
        order_id = user_state_data.get("current_order_id", "")
        
        # Update user state with selected plan
        await self.db_manager.update_user_state_data(user_id, {
            "selected_plan": plan_key,
            "plan_details": plan
        })
        
        # For Extreme and 2-week plans, validate goal realism
        if plan_key in ["extreme", "2week"]:
            await self._validate_goal_realism(update, context, user_goal, plan_key, order_id)
        elif plan_key == "regular":
            # For Regular plan, show development notice
            await self._handle_regular_development(update, context, user_goal, order_id)
        else:
            # For other plans, proceed directly to confirmation
            await self._show_plan_confirmation(update, context, user_goal, plan_key, order_id)
    
    async def _validate_goal_realism(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_goal: str, plan_key: str, order_id: str):
        """Validate if the goal is realistic for the selected plan"""
        user_id = update.effective_user.id
        plan = self.subscription_plans[plan_key]
        
        # Truncate goal for display
        display_goal = user_goal[:80] + "..." if len(user_goal) > 80 else user_goal
        
        validation_text = f"""
ü§î **–í–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ç–≤–æ–µ–π —Ü–µ–ª–∏**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** "{display_goal}"
üìã **–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:** {plan['name']} - {plan['result_time']}

**–°–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ:** –¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–∏—à—å, —á—Ç–æ —ç—Ç–∞ —Ü–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤ –Ω–∞—à–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è?

–ï—Å–ª–∏ —Ç–≤–æ—è —Ü–µ–ª—å –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ–π –∏–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π, —è –ø—Ä–µ–¥–ª–∞–≥–∞—é:

**üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ü–µ–ª—å** - —Å–µ—Ä—å–µ–∑–Ω—ã–π —à–∞–≥ –∫ —Ç–≤–æ–µ–π –º–µ—á—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π:
‚Ä¢ –†–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∏–∂–∏–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –î–∞—Å—Ç —Ç–µ–±–µ –æ—â—É—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª–∏
‚Ä¢ –ü–æ–∫–∞–∂–µ—Ç, —á—Ç–æ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–≤–∏–∂–µ—à—å—Å—è –≤–ø–µ—Ä–µ–¥

**–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ü–µ–ª–µ–π:**
‚Ä¢ –í–º–µ—Å—Ç–æ "—Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º" ‚Üí "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ 100,000 —Ä—É–±–ª–µ–π"
‚Ä¢ –í–º–µ—Å—Ç–æ "–Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å –≤—Å–µ–π –∂–∏–∑–Ω–∏" ‚Üí "–ø–æ–π—Ç–∏ –Ω–∞ 3 —Å–≤–∏–¥–∞–Ω–∏—è"
‚Ä¢ –í–º–µ—Å—Ç–æ "—Å—Ç–∞—Ç—å –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–º" ‚Üí "—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è 1000 –ª—é–¥—è–º"

**–ß—Ç–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?**
1Ô∏è‚É£ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ü–µ–ª—å
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å", callback_data="keep_original_goal")],
            [InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é", callback_data="set_intermediate_goal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Update state to goal validation
        await self.db_manager.update_user_state_data(user_id, {"step": "goal_validation"})
        
        await update.message.reply_text(validation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_plan_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_goal: str, plan_key: str, order_id: str):
        """Show plan confirmation"""
        user_id = update.effective_user.id
        plan = self.subscription_plans[plan_key]
        
        # Truncate goal for display
        display_goal = user_goal[:80] + "..." if len(user_goal) > 80 else user_goal
        
        confirmation_text = f"""
üéâ **–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¶–µ–ª—å:** "{display_goal}"
üìã **–ü–ª–∞–Ω:** {plan['name']} - {plan['price']}
‚è±Ô∏è **–ü–æ–¥—Ö–æ–¥:** {plan['approach']}
üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {plan['result_time']}

**–ß—Ç–æ –¥–∞–ª—å—à–µ:**
1Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∞—é –ø–ª–∞—Ç–µ–∂ –±–µ–∑–æ–ø–∞—Å–Ω–æ
2Ô∏è‚É£ –ù–∞—á–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–≤–æ–µ–π —Ü–µ–ª—å—é
3Ô∏è‚É£ –ë—É–¥—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
4Ô∏è‚É£ –ü–æ–º–æ–≥—É –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!

–ì–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é? üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å", callback_data="confirm_plan")],
            [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data="back_to_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(confirmation_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _confirm_plan_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Confirm plan selection and move to payment"""
        user_id = update.effective_user.id
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        
        # Use final target goal (could be original or intermediate)
        final_target_goal = user_state_data.get("final_target_goal", user_state_data.get("user_goal", ""))
        order_id = user_state_data.get("current_order_id", "")
        selected_plan = user_state_data.get("selected_plan", "")
        plan_details = user_state_data.get("plan_details", {})
        
        # Create subscription in database with final target goal
        subscription_created = await self.db_manager.create_subscription(
            user_id=user_id,
            order_id=order_id,
            user_goal=final_target_goal,
            subscription_type=selected_plan,
            plan_details=plan_details
        )
        
        if not subscription_created:
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='Markdown'
            )
            return
        
        # Move to payment phase
        await self.db_manager.set_user_state(user_id, "payment", {
            "order_id": order_id,
            "user_goal": final_target_goal,
            "original_goal": user_state_data.get("original_goal", ""),
            "selected_plan": selected_plan,
            "plan_details": plan_details
        })
        
        confirmation_text = f"""
üéä **–ü–ª–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id} –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ!**

–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é.

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–≤–æ–µ–π —Ü–µ–ª–∏! ‚ú®
        """
        
        await update.callback_query.edit_message_text(confirmation_text, parse_mode='Markdown')
        
        # Import here to avoid circular imports
        from modules.paying import PayingModule
        paying_module = PayingModule(self.db_manager, self.state_manager)
        await paying_module.start_payment(update, context)
    
    async def _show_help_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help message for plan selection"""
        help_text = """
‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º?**

–í–æ—Ç –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω:

**–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏:**
‚Ä¢ "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π" –∏–ª–∏ "üöÄ" –¥–ª—è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
‚Ä¢ "2-–Ω–µ–¥–µ–ª—å–Ω—ã–π" –∏–ª–∏ "‚ö°" –¥–ª—è 2-–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞  
‚Ä¢ "–û–±—ã—á–Ω—ã–π" –∏–ª–∏ "üìù" –¥–ª—è –û–±—ã—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞

**–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –∫–∞–∂–¥—ã–π –ø–ª–∞–Ω –ø–æ–¥—Ä–æ–±–Ω–æ!**

–û –∫–∞–∫–æ–º –ø–ª–∞–Ω–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? ü§î
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_extreme")],
            [InlineKeyboardButton("‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_2week")],
            [InlineKeyboardButton("üìù –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_regular")],
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω—ã", callback_data="compare_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "compare_plans":
            await self._show_plan_comparison(update, context)
        elif query.data == "back_to_plans":
            await self._show_plan_overview(update, context)
        elif query.data == "back_to_overview":
            await self._show_plan_overview(update, context)
        elif query.data.startswith("plan_"):
            plan_key = query.data.split("_")[1]
            await self._show_plan_details(update, context, plan_key)
        elif query.data.startswith("select_"):
            plan_key = query.data.split("_")[1]
            await self._select_plan(update, context, plan_key)
        elif query.data == "confirm_plan":
            await self._confirm_plan_selection(update, context)
        elif query.data == "ask_plan_questions":
            await self._handle_plan_questions(update, context)
    
    async def _handle_plan_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle questions about plans"""
        questions_text = """
‚ùì **–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –æ –ø–ª–∞–Ω–∞—Ö:**

**–í: –ú–æ–≥—É –ª–∏ —è –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–æ–∑–∂–µ?**
–û: –î–∞! –¢—ã –º–æ–∂–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å –∏–ª–∏ –ø–æ–Ω–∏–∑–∏—Ç—å –ø–ª–∞–Ω –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

**–í: –ß—Ç–æ –µ—Å–ª–∏ —è –Ω–µ –±—É–¥—É –¥–æ–≤–æ–ª–µ–Ω?**
–û: –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º 7-–¥–Ω–µ–≤–Ω—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –≤—Å–µ –ø–ª–∞–Ω—ã.

**–í: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞?**
–û: –ü–ª–∞–Ω—ã –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω—ã.

**–í: –ú–æ–≥—É –ª–∏ —è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?**
–û: –î–∞, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å—Ä–æ–∫ –¥–æ 30 –¥–Ω–µ–π –≤ –≥–æ–¥.

**–í: –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?**
–û: –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –∏ PayPal.

–ì–æ—Ç–æ–≤ –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω —Å–µ–π—á–∞—Å? üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_extreme")],
            [InlineKeyboardButton("‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_2week")],
            [InlineKeyboardButton("üìù –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_regular")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="back_to_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(questions_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _get_personalized_recommendation(self, user_id: int) -> str:
        """Get personalized plan recommendation based on user profile"""
        user_profile = await self.db_manager.get_user_profile(user_id)
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        
        if not user_profile:
            return ""
        
        age = user_state_data.get("user_age")
        city = user_profile.get("city", "")
        
        recommendation = ""
        
        if age:
            if age < 25:
                recommendation = "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞:** –ù–∞—á–Ω–∏ —Å –û–±—ã—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ - –æ–Ω –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–ª–æ–¥—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–≤–æ–π –ø—É—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
            elif age < 35:
                recommendation = "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞:** 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∂–∏–∑–Ω–∏!"
            else:
                recommendation = "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞:** –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–º–æ–∂–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
        
        if city:
            if "–º–æ—Å–∫–≤" in city.lower() or "—Å–ø–±" in city.lower() or "—Å–∞–Ω–∫—Ç" in city.lower():
                recommendation += "\n\nüèôÔ∏è **–î–ª—è –∂–∏—Ç–µ–ª–µ–π –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤:** –†–µ–∫–æ–º–µ–Ω–¥—É—é –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã - –≤ –º–µ–≥–∞–ø–æ–ª–∏—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –±—ã—Å—Ç—Ä–µ–µ!"
            elif "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" in city.lower() or "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" in city.lower() or "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫" in city.lower():
                recommendation += "\n\nüåÜ **–î–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤:** 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±–µ—Å–ø–µ—á–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        
        return recommendation
    
    async def _collect_user_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_name: str = ""):
        """Collect user's goal"""
        if user_name:
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        else:
            greeting = ""
            
        goal_text = f"""
{greeting}üéØ **–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–µ–π —Ü–µ–ª–∏!**

–ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–µ—Ç–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–æ–≥–æ, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å.

**–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π:**
‚Ä¢ –ö–∞–∫—É—é —Ü–µ–ª—å —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å?
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?
‚Ä¢ –ö–∞–∫–∞—è –º–µ—á—Ç–∞ –∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ–π?

**–ü—Ä–∏–º–µ—Ä—ã —Ü–µ–ª–µ–π:**
‚Ä¢ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã
‚Ä¢ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤
‚Ä¢ –î–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ù–∞–π—Ç–∏ —Å–≤–æ–µ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ
‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üöÄ

*–ù–∞–ø–æ–º–∏–Ω–∞—é: –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ–¥ –≤–∞—à–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é* ‚öñÔ∏è
        """
        
        await update.message.reply_text(goal_text, parse_mode='Markdown')
    
    async def _process_goal_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, goal_text: str):
        """Process user's goal input"""
        user_id = update.effective_user.id
        
        # Store the goal in user state data
        await self.db_manager.update_user_state_data(user_id, {
            "user_goal": goal_text,
            "step": "plan_selection"
        })
        
        # Create a new order/subscription for this goal
        order_id = await self._create_new_order(user_id, goal_text)
        
        # Show plan overview with goal context
        user_profile = await self.db_manager.get_user_profile(user_id)
        user_name = user_profile.get("first_name", "") if user_profile else ""
        
        await self._show_plan_overview_with_goal(update, context, user_name, goal_text, order_id)
    
    async def _create_new_order(self, user_id: int, goal_text: str) -> str:
        """Create a new order/subscription for the goal"""
        import uuid
        from datetime import datetime
        
        order_id = str(uuid.uuid4())[:8]  # Short unique order ID
        
        # Store order information in user state data
        await self.db_manager.update_user_state_data(user_id, {
            "current_order_id": order_id,
            "order_created_at": datetime.now().isoformat(),
            "order_status": "pending_payment"
        })
        
        logger.info(f"Created new order {order_id} for user {user_id} with goal: {goal_text[:50]}...")
        return order_id
    
    async def _show_plan_overview_with_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_name: str, goal_text: str, order_id: str):
        """Show plan overview with user's goal context"""
        user_id = update.effective_user.id
        
        if user_name:
            greeting = f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! üëã\n\n"
        else:
            greeting = "–û—Ç–ª–∏—á–Ω–æ! üëã\n\n"
        
        # Get personalized recommendation
        recommendation = await self._get_personalized_recommendation(user_id)
        
        # Truncate goal if too long
        display_goal = goal_text[:100] + "..." if len(goal_text) > 100 else goal_text
            
        overview_text = f"""
{greeting}üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** "{display_goal}"

üíé **–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–π —Ü–µ–ª–∏:**

–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç—Ä–∏ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ç–≤–æ–µ–π —Ü–µ–ª—å—é:

**üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ4,990
‚Ä¢ 10-15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏

**‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ2,490  
‚Ä¢ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ 2 –Ω–µ–¥–µ–ª–∏

**üìù –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ990
‚Ä¢ –†–∞–∑ –≤ –¥–µ–Ω—å, –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º–µ—Å—è—Ü

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}** - –∫–∞–∂–¥—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π —Ü–µ–ª—å—é –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

{recommendation}

–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø–ª–∞–Ω—ã", callback_data="compare_plans")],
            [InlineKeyboardButton("üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π", callback_data="plan_extreme")],
            [InlineKeyboardButton("‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="plan_2week")],
            [InlineKeyboardButton("üìù –û–±—ã—á–Ω—ã–π", callback_data="plan_regular")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(overview_text, parse_mode='Markdown', reply_markup=reply_markup)
    async def _process_goal_validation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, response_text: str):
        """Process user's response to goal validation"""
        user_id = update.effective_user.id
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        
        # Check if user wants to set intermediate goal
        if any(word in response_text.lower() for word in ["–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é", "–¥—Ä—É–≥—É—é", "—á–∞—Å—Ç–∏—á–Ω—É—é", "—à–∞–≥", "—á–∞—Å—Ç—å"]):
            await self._ask_for_intermediate_goal(update, context)
        else:
            # User wants to keep original goal
            await self._keep_original_goal(update, context)
    
    async def _ask_for_intermediate_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ask user to provide intermediate goal"""
        user_id = update.effective_user.id
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        original_goal = user_state_data.get("user_goal", "")
        
        intermediate_goal_text = f"""
üéØ **–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ü–µ–ª—å**

**–¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—á—Ç–∞:** "{original_goal}"

–¢–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –∏ –Ω–∞–ø–∏—à–∏ **–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ü–µ–ª—å** - —Å–µ—Ä—å–µ–∑–Ω—ã–π —à–∞–≥ –∫ —Ç–≤–æ–µ–π –º–µ—á—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π:

‚úÖ **–†–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∏–∂–∏–º** –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚úÖ **–î–∞—Å—Ç –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** - —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –¥–≤–∏–∂–µ—à—å—Å—è –≤–ø–µ—Ä–µ–¥
‚úÖ **–ü—Ä–∏–±–ª–∏–∑–∏—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª–∏** - —ç—Ç–æ –±—É–¥–µ—Ç –≤–∞–∂–Ω—ã–π —à–∞–≥ –∫ –º–µ—á—Ç–µ
‚úÖ **–ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å** - –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞—Ö–æ—á–µ—Ç—Å—è –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ

**–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ü–µ–ª–µ–π:**
‚Ä¢ "–ù–∞–π—Ç–∏ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫–∏"
‚Ä¢ "–ü–æ–π—Ç–∏ –Ω–∞ 2 —Å–≤–∏–¥–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏"
‚Ä¢ "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å 100 –ª–∞–π–∫–æ–≤"
‚Ä¢ "–ù–∞–π—Ç–∏ 5 —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
‚Ä¢ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"

**–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ü–µ–ª—å:**
        """
        
        # Update state to intermediate goal collection
        await self.db_manager.update_user_state_data(user_id, {"step": "intermediate_goal_collection"})
        
        await update.message.reply_text(intermediate_goal_text, parse_mode='Markdown')
    
    async def _keep_original_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Keep the original goal and proceed to confirmation"""
        user_id = update.effective_user.id
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        
        user_goal = user_state_data.get("user_goal", "")
        selected_plan = user_state_data.get("selected_plan", "")
        order_id = user_state_data.get("current_order_id", "")
        
        # Store final target goal (same as original)
        await self.db_manager.update_user_state_data(user_id, {
            "final_target_goal": user_goal,
            "step": "plan_selection"
        })
        
        # Show plan confirmation
        await self._show_plan_confirmation(update, context, user_goal, selected_plan, order_id)
    
    async def _process_intermediate_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, intermediate_goal: str):
        """Process intermediate goal input"""
        user_id = update.effective_user.id
        user_state_data = await self.db_manager.get_user_state_data(user_id)
        
        original_goal = user_state_data.get("user_goal", "")
        selected_plan = user_state_data.get("selected_plan", "")
        order_id = user_state_data.get("current_order_id", "")
        
        # Store final target goal (intermediate goal becomes the target)
        await self.db_manager.update_user_state_data(user_id, {
            "final_target_goal": intermediate_goal,
            "original_goal": original_goal,  # Keep original for reference
            "step": "plan_selection"
        })
        
        # Show plan confirmation with intermediate goal
        await self._show_plan_confirmation(update, context, intermediate_goal, selected_plan, order_id)
    
    async def _handle_regular_development(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_goal: str, order_id: str):
        """Handle Regular plan development notice"""
        user_id = update.effective_user.id
        user_profile = await self.db_manager.get_user_profile(user_id)
        user_name = user_profile.get("first_name", "") if user_profile else ""
        
        # Truncate goal for display
        display_goal = user_goal[:80] + "..." if len(user_goal) > 80 else user_goal
        
        development_text = f"""
üöß **–û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**

**–ó–∞–∫–∞–∑ ‚Ññ{order_id}**
üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** "{display_goal}"

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, **–û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω** —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

**–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
‚Ä¢ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
‚Ä¢ –ü–ª–∞–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É —Å —Ç–≤–æ–µ–π —Ü–µ–ª—å—é
‚Ä¢ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è

**–¢–≤–æ—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!** üìù
–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–≤–æ–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ –∫ –û–±—ã—á–Ω–æ–º—É –ø–ª–∞–Ω—É.

**–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤:**

**üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ4,990
‚Ä¢ 10-15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏

**‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω** - ‚ÇΩ2,490
‚Ä¢ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ 2 –Ω–µ–¥–µ–ª–∏

–ö–∞–∫–æ–π –ø–ª–∞–Ω —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_extreme")],
            [InlineKeyboardButton("‚ö° 2-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="plan_2week")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="back_to_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Send notification to admin
        await admin_notifications.notify_regular_plan_request(user_id, user_name, user_goal, order_id)
        
        # Reset to plan selection step
        await self.db_manager.update_user_state_data(user_id, {"step": "plan_selection"})
        
        await update.message.reply_text(development_text, parse_mode='Markdown', reply_markup=reply_markup)
    
