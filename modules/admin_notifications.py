#!/usr/bin/env python3
"""
Admin Notifications Module
Handles sending notifications from main bot modules to admin bot
"""

import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

class AdminNotificationService:
    """Service for sending notifications to admin bot"""
    
    def __init__(self):
        self.admin_bot_token = os.getenv('ADMIN_BOT_TOKEN')
        self.admin_user_id = os.getenv('ADMIN_USER_ID', '41107472')
        
        if not self.admin_bot_token:
            logger.warning("ADMIN_BOT_TOKEN not found, admin notifications disabled")
            self.admin_bot_token = None
    
    async def send_notification(self, message: str, notification_type: str = "general"):
        """Send notification to admin via admin bot"""
        try:
            if not self.admin_bot_token:
                logger.warning("Admin bot token not available, logging notification instead")
                logger.info(f"ADMIN NOTIFICATION ({notification_type}): {message}")
                return False
            
            # Create admin bot instance
            admin_bot = Bot(token=self.admin_bot_token)
            
            # Send notification
            await admin_bot.send_message(
                chat_id=self.admin_user_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info(f"Admin notification sent successfully: {notification_type}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending admin notification: {e}")
            return False
    
    async def notify_new_user(self, user_id: int, username: str, first_name: str, last_name: str):
        """Notify admin about new user registration"""
        full_name = f"{first_name} {last_name}".strip() if first_name or last_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        message = f"""
üëã **–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!**

üë§ **–ò–º—è:** {full_name}
üì± **Username:** @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî **ID:** {user_id}

‚è∞ **–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {self._get_current_time()}

**–î–µ–π—Å—Ç–≤–∏–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º HackReality
        """
        return await self.send_notification(message, "new_users")
    
    async def notify_regular_plan_request(self, user_id: int, user_name: str, user_goal: str, order_id: str):
        """Notify admin about Regular plan request"""
        message = f"""
üöß **–ó–∞–ø—Ä–æ—Å –û–±—ã—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üéØ **–¶–µ–ª—å:** "{user_goal}"
üì¶ **–ó–∞–∫–∞–∑:** #{order_id}

‚è∞ **–í—Ä–µ–º—è:** {self._get_current_time()}

**–î–µ–π—Å—Ç–≤–∏–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –û–±—ã—á–Ω–æ–º –ø–ª–∞–Ω–µ, –Ω–æ –ø–ª–∞–Ω –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
        """
        return await self.send_notification(message, "regular_plan_requests")
    
    async def notify_donation_confirmation(self, user_id: int, user_name: str, order_id: str, target_goal: str, plan_details: dict):
        """Notify admin about donation confirmation"""
        message = f"""
üí∞ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–û–ù–ê–¢–ê**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üì¶ **–ó–∞–∫–∞–∑:** #{order_id}
üéØ **–¶–µ–ª—å:** "{target_goal}"
üìã **–ü–ª–∞–Ω:** {plan_details.get('name', 'Unknown')}
üí∞ **–°—É–º–º–∞:** {plan_details.get('price', 'Unknown')}

‚è∞ **–í—Ä–µ–º—è:** {self._get_current_time()}

**–î–µ–π—Å—Ç–≤–∏–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ —Å–¥–µ–ª–∞–ª –¥–æ–Ω–∞—Ç –Ω–∞ –Ω–æ–º–µ—Ä +79853659487

**–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞!**
        """
        return await self.send_notification(message, "payments")
    
    async def notify_setup_complete(self, user_id: int, order_id: str, target_goal: str, selected_plan: str):
        """Notify admin about setup completion"""
        message = f"""
üéØ **–ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ID: {user_id}
üì¶ **–ó–∞–∫–∞–∑:** #{order_id}
üéØ **–¶–µ–ª—å:** "{target_goal}"
üìã **–ü–ª–∞–Ω:** {selected_plan}

‚è∞ **–í—Ä–µ–º—è:** {self._get_current_time()}

**–î–µ–π—Å—Ç–≤–∏–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Ü–µ–ª—å—é.

**–°—Ç–∞—Ç—É—Å:** –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞!
        """
        return await self.send_notification(message, "new_subscriptions")
    
    async def notify_error(self, error_message: str, user_id: int = None, context: str = ""):
        """Notify admin about errors"""
        user_info = f" (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})" if user_id else ""
        message = f"""
‚ùå **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ**

üö® **–û—à–∏–±–∫–∞:** {error_message}
üìù **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}{user_info}

‚è∞ **–í—Ä–µ–º—è:** {self._get_current_time()}
        """
        return await self.send_notification(message, "errors")
    
    async def notify_payment(self, user_id: int, user_name: str, amount: str, order_id: str, payment_method: str):
        """Notify admin about successful payment"""
        message = f"""
üí≥ **–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üí∞ **–°—É–º–º–∞:** {amount}
üì¶ **–ó–∞–∫–∞–∑:** #{order_id}
üí≥ **–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:** {payment_method}

‚è∞ **–í—Ä–µ–º—è:** {self._get_current_time()}
        """
        return await self.send_notification(message, "payments")
    
    async def notify_help_request(self, user_id: int, user_name: str, message_text: str):
        """Notify admin about help request"""
        message = f"""
üÜò **–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** "{message_text}"

‚è∞ **–í—Ä–µ–º—è:** {self._get_current_time()}
        """
        return await self.send_notification(message, "help_requests")
    
    def _get_current_time(self):
        """Get current time in readable format"""
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Global instance for use across modules
admin_notifications = AdminNotificationService()
